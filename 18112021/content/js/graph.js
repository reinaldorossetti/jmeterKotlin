/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 582.0, "minX": 0.0, "maxY": 30099.0, "series": [{"data": [[0.0, 582.0], [0.1, 627.0], [0.2, 664.0], [0.3, 667.0], [0.4, 697.0], [0.5, 699.0], [0.6, 733.0], [0.7, 736.0], [0.8, 749.0], [0.9, 750.0], [1.0, 766.0], [1.1, 787.0], [1.2, 879.0], [1.3, 921.0], [1.4, 956.0], [1.5, 984.0], [1.6, 988.0], [1.7, 999.0], [1.8, 1126.0], [1.9, 1127.0], [2.0, 1160.0], [2.1, 1161.0], [2.2, 1167.0], [2.3, 1172.0], [2.4, 1174.0], [2.5, 1182.0], [2.6, 1184.0], [2.7, 1209.0], [2.8, 1212.0], [2.9, 1292.0], [3.0, 1298.0], [3.1, 1327.0], [3.2, 1373.0], [3.3, 1428.0], [3.4, 1436.0], [3.5, 1482.0], [3.6, 1560.0], [3.7, 1613.0], [3.8, 1614.0], [3.9, 1627.0], [4.0, 1627.0], [4.1, 1636.0], [4.2, 1664.0], [4.3, 1699.0], [4.4, 1703.0], [4.5, 1769.0], [4.6, 1770.0], [4.7, 1841.0], [4.8, 1857.0], [4.9, 1909.0], [5.0, 1935.0], [5.1, 1980.0], [5.2, 2022.0], [5.3, 2104.0], [5.4, 2111.0], [5.5, 2145.0], [5.6, 2152.0], [5.7, 2180.0], [5.8, 2226.0], [5.9, 2272.0], [6.0, 2308.0], [6.1, 2312.0], [6.2, 2389.0], [6.3, 2400.0], [6.4, 2429.0], [6.5, 2445.0], [6.6, 2530.0], [6.7, 2541.0], [6.8, 2596.0], [6.9, 2601.0], [7.0, 2625.0], [7.1, 2626.0], [7.2, 2651.0], [7.3, 2667.0], [7.4, 2668.0], [7.5, 2677.0], [7.6, 2680.0], [7.7, 2681.0], [7.8, 2710.0], [7.9, 2724.0], [8.0, 2728.0], [8.1, 2729.0], [8.2, 2733.0], [8.3, 2739.0], [8.4, 2782.0], [8.5, 2789.0], [8.6, 2797.0], [8.7, 2798.0], [8.8, 2802.0], [8.9, 2802.0], [9.0, 2815.0], [9.1, 2815.0], [9.2, 2831.0], [9.3, 2836.0], [9.4, 2837.0], [9.5, 2854.0], [9.6, 2869.0], [9.7, 2869.0], [9.8, 2877.0], [9.9, 2887.0], [10.0, 2911.0], [10.1, 2923.0], [10.2, 2944.0], [10.3, 2951.0], [10.4, 2992.0], [10.5, 2998.0], [10.6, 3024.0], [10.7, 3036.0], [10.8, 3045.0], [10.9, 3051.0], [11.0, 3075.0], [11.1, 3086.0], [11.2, 3122.0], [11.3, 3139.0], [11.4, 3156.0], [11.5, 3164.0], [11.6, 3168.0], [11.7, 3178.0], [11.8, 3196.0], [11.9, 3215.0], [12.0, 3306.0], [12.1, 3314.0], [12.2, 3327.0], [12.3, 3337.0], [12.4, 3343.0], [12.5, 3343.0], [12.6, 3368.0], [12.7, 3370.0], [12.8, 3382.0], [12.9, 3389.0], [13.0, 3396.0], [13.1, 3396.0], [13.2, 3400.0], [13.3, 3409.0], [13.4, 3414.0], [13.5, 3421.0], [13.6, 3438.0], [13.7, 3441.0], [13.8, 3445.0], [13.9, 3452.0], [14.0, 3455.0], [14.1, 3461.0], [14.2, 3472.0], [14.3, 3476.0], [14.4, 3488.0], [14.5, 3490.0], [14.6, 3500.0], [14.7, 3505.0], [14.8, 3522.0], [14.9, 3523.0], [15.0, 3553.0], [15.1, 3557.0], [15.2, 3578.0], [15.3, 3578.0], [15.4, 3593.0], [15.5, 3594.0], [15.6, 3605.0], [15.7, 3607.0], [15.8, 3613.0], [15.9, 3616.0], [16.0, 3633.0], [16.1, 3635.0], [16.2, 3636.0], [16.3, 3641.0], [16.4, 3664.0], [16.5, 3670.0], [16.6, 3673.0], [16.7, 3675.0], [16.8, 3688.0], [16.9, 3691.0], [17.0, 3715.0], [17.1, 3721.0], [17.2, 3759.0], [17.3, 3760.0], [17.4, 3771.0], [17.5, 3771.0], [17.6, 3783.0], [17.7, 3792.0], [17.8, 3799.0], [17.9, 3801.0], [18.0, 3805.0], [18.1, 3808.0], [18.2, 3817.0], [18.3, 3832.0], [18.4, 3843.0], [18.5, 3846.0], [18.6, 3851.0], [18.7, 3854.0], [18.8, 3877.0], [18.9, 3911.0], [19.0, 3953.0], [19.1, 3994.0], [19.2, 4005.0], [19.3, 4009.0], [19.4, 4014.0], [19.5, 4016.0], [19.6, 4022.0], [19.7, 4032.0], [19.8, 4041.0], [19.9, 4044.0], [20.0, 4050.0], [20.1, 4070.0], [20.2, 4079.0], [20.3, 4087.0], [20.4, 4097.0], [20.5, 4098.0], [20.6, 4124.0], [20.7, 4125.0], [20.8, 4129.0], [20.9, 4132.0], [21.0, 4139.0], [21.1, 4142.0], [21.2, 4148.0], [21.3, 4151.0], [21.4, 4157.0], [21.5, 4168.0], [21.6, 4172.0], [21.7, 4196.0], [21.8, 4198.0], [21.9, 4207.0], [22.0, 4211.0], [22.1, 4213.0], [22.2, 4242.0], [22.3, 4244.0], [22.4, 4251.0], [22.5, 4270.0], [22.6, 4289.0], [22.7, 4303.0], [22.8, 4325.0], [22.9, 4332.0], [23.0, 4339.0], [23.1, 4354.0], [23.2, 4369.0], [23.3, 4376.0], [23.4, 4415.0], [23.5, 4422.0], [23.6, 4427.0], [23.7, 4436.0], [23.8, 4442.0], [23.9, 4461.0], [24.0, 4485.0], [24.1, 4520.0], [24.2, 4541.0], [24.3, 4552.0], [24.4, 4575.0], [24.5, 4591.0], [24.6, 4615.0], [24.7, 4632.0], [24.8, 4667.0], [24.9, 4673.0], [25.0, 4688.0], [25.1, 4698.0], [25.2, 4723.0], [25.3, 4733.0], [25.4, 4746.0], [25.5, 4751.0], [25.6, 4770.0], [25.7, 4772.0], [25.8, 4807.0], [25.9, 4821.0], [26.0, 4829.0], [26.1, 4831.0], [26.2, 4854.0], [26.3, 4862.0], [26.4, 4878.0], [26.5, 4889.0], [26.6, 4897.0], [26.7, 4898.0], [26.8, 4912.0], [26.9, 4935.0], [27.0, 4949.0], [27.1, 4965.0], [27.2, 4985.0], [27.3, 4989.0], [27.4, 5012.0], [27.5, 5034.0], [27.6, 5046.0], [27.7, 5069.0], [27.8, 5070.0], [27.9, 5076.0], [28.0, 5106.0], [28.1, 5108.0], [28.2, 5185.0], [28.3, 5191.0], [28.4, 5204.0], [28.5, 5208.0], [28.6, 5215.0], [28.7, 5230.0], [28.8, 5249.0], [28.9, 5270.0], [29.0, 5273.0], [29.1, 5280.0], [29.2, 5322.0], [29.3, 5325.0], [29.4, 5352.0], [29.5, 5375.0], [29.6, 5422.0], [29.7, 5444.0], [29.8, 5462.0], [29.9, 5474.0], [30.0, 5486.0], [30.1, 5507.0], [30.2, 5536.0], [30.3, 5555.0], [30.4, 5562.0], [30.5, 5566.0], [30.6, 5602.0], [30.7, 5612.0], [30.8, 5653.0], [30.9, 5658.0], [31.0, 5717.0], [31.1, 5737.0], [31.2, 5802.0], [31.3, 5811.0], [31.4, 5837.0], [31.5, 5855.0], [31.6, 5889.0], [31.7, 5955.0], [31.8, 6017.0], [31.9, 6025.0], [32.0, 6044.0], [32.1, 6053.0], [32.2, 6079.0], [32.3, 6079.0], [32.4, 6097.0], [32.5, 6155.0], [32.6, 6237.0], [32.7, 6255.0], [32.8, 6272.0], [32.9, 6274.0], [33.0, 6300.0], [33.1, 6315.0], [33.2, 6382.0], [33.3, 6425.0], [33.4, 6482.0], [33.5, 6485.0], [33.6, 6540.0], [33.7, 6543.0], [33.8, 6650.0], [33.9, 6663.0], [34.0, 6883.0], [34.1, 6896.0], [34.2, 6907.0], [34.3, 7007.0], [34.4, 7076.0], [34.5, 7167.0], [34.6, 7191.0], [34.7, 7335.0], [34.8, 7345.0], [34.9, 7424.0], [35.0, 7491.0], [35.1, 7539.0], [35.2, 7539.0], [35.3, 7548.0], [35.4, 7577.0], [35.5, 7590.0], [35.6, 7597.0], [35.7, 7660.0], [35.8, 7688.0], [35.9, 7723.0], [36.0, 7730.0], [36.1, 7762.0], [36.2, 7764.0], [36.3, 7852.0], [36.4, 7870.0], [36.5, 7917.0], [36.6, 7918.0], [36.7, 7970.0], [36.8, 7986.0], [36.9, 7994.0], [37.0, 8003.0], [37.1, 8028.0], [37.2, 8056.0], [37.3, 8084.0], [37.4, 8105.0], [37.5, 8139.0], [37.6, 8140.0], [37.7, 8157.0], [37.8, 8169.0], [37.9, 8216.0], [38.0, 8218.0], [38.1, 8236.0], [38.2, 8268.0], [38.3, 8286.0], [38.4, 8288.0], [38.5, 8300.0], [38.6, 8304.0], [38.7, 8325.0], [38.8, 8355.0], [38.9, 8396.0], [39.0, 8410.0], [39.1, 8417.0], [39.2, 8466.0], [39.3, 8496.0], [39.4, 8508.0], [39.5, 8536.0], [39.6, 8539.0], [39.7, 8544.0], [39.8, 8553.0], [39.9, 8568.0], [40.0, 8581.0], [40.1, 8593.0], [40.2, 8614.0], [40.3, 8661.0], [40.4, 8667.0], [40.5, 8684.0], [40.6, 8693.0], [40.7, 8713.0], [40.8, 8731.0], [40.9, 8827.0], [41.0, 8827.0], [41.1, 8844.0], [41.2, 8851.0], [41.3, 8880.0], [41.4, 8882.0], [41.5, 8885.0], [41.6, 8890.0], [41.7, 8936.0], [41.8, 8949.0], [41.9, 8969.0], [42.0, 8977.0], [42.1, 9017.0], [42.2, 9019.0], [42.3, 9023.0], [42.4, 9025.0], [42.5, 9031.0], [42.6, 9038.0], [42.7, 9047.0], [42.8, 9063.0], [42.9, 9075.0], [43.0, 9075.0], [43.1, 9083.0], [43.2, 9085.0], [43.3, 9091.0], [43.4, 9094.0], [43.5, 9098.0], [43.6, 9102.0], [43.7, 9118.0], [43.8, 9126.0], [43.9, 9167.0], [44.0, 9173.0], [44.1, 9189.0], [44.2, 9197.0], [44.3, 9221.0], [44.4, 9222.0], [44.5, 9236.0], [44.6, 9244.0], [44.7, 9276.0], [44.8, 9282.0], [44.9, 9302.0], [45.0, 9304.0], [45.1, 9321.0], [45.2, 9324.0], [45.3, 9325.0], [45.4, 9326.0], [45.5, 9334.0], [45.6, 9338.0], [45.7, 9349.0], [45.8, 9353.0], [45.9, 9366.0], [46.0, 9367.0], [46.1, 9392.0], [46.2, 9394.0], [46.3, 9400.0], [46.4, 9402.0], [46.5, 9408.0], [46.6, 9413.0], [46.7, 9431.0], [46.8, 9434.0], [46.9, 9462.0], [47.0, 9465.0], [47.1, 9470.0], [47.2, 9483.0], [47.3, 9514.0], [47.4, 9521.0], [47.5, 9536.0], [47.6, 9537.0], [47.7, 9559.0], [47.8, 9565.0], [47.9, 9606.0], [48.0, 9619.0], [48.1, 9627.0], [48.2, 9653.0], [48.3, 9668.0], [48.4, 9685.0], [48.5, 9691.0], [48.6, 9727.0], [48.7, 9778.0], [48.8, 9785.0], [48.9, 9790.0], [49.0, 9796.0], [49.1, 9818.0], [49.2, 9838.0], [49.3, 9862.0], [49.4, 9876.0], [49.5, 9887.0], [49.6, 9888.0], [49.7, 9910.0], [49.8, 9916.0], [49.9, 9936.0], [50.0, 9943.0], [50.1, 9944.0], [50.2, 9953.0], [50.3, 9962.0], [50.4, 9965.0], [50.5, 9981.0], [50.6, 9984.0], [50.7, 9987.0], [50.8, 9992.0], [50.9, 10000.0], [51.0, 10001.0], [51.1, 10002.0], [51.2, 10005.0], [51.3, 10028.0], [51.4, 10042.0], [51.5, 10045.0], [51.6, 10046.0], [51.7, 10058.0], [51.8, 10073.0], [51.9, 10085.0], [52.0, 10088.0], [52.1, 10099.0], [52.2, 10100.0], [52.3, 10129.0], [52.4, 10131.0], [52.5, 10152.0], [52.6, 10155.0], [52.7, 10166.0], [52.8, 10170.0], [52.9, 10174.0], [53.0, 10174.0], [53.1, 10180.0], [53.2, 10190.0], [53.3, 10196.0], [53.4, 10199.0], [53.5, 10206.0], [53.6, 10208.0], [53.7, 10219.0], [53.8, 10233.0], [53.9, 10241.0], [54.0, 10245.0], [54.1, 10251.0], [54.2, 10253.0], [54.3, 10261.0], [54.4, 10265.0], [54.5, 10274.0], [54.6, 10276.0], [54.7, 10285.0], [54.8, 10287.0], [54.9, 10293.0], [55.0, 10296.0], [55.1, 10308.0], [55.2, 10387.0], [55.3, 10394.0], [55.4, 10395.0], [55.5, 10399.0], [55.6, 10402.0], [55.7, 10423.0], [55.8, 10424.0], [55.9, 10427.0], [56.0, 10428.0], [56.1, 10433.0], [56.2, 10449.0], [56.3, 10459.0], [56.4, 10460.0], [56.5, 10464.0], [56.6, 10469.0], [56.7, 10478.0], [56.8, 10479.0], [56.9, 10497.0], [57.0, 10499.0], [57.1, 10500.0], [57.2, 10507.0], [57.3, 10522.0], [57.4, 10533.0], [57.5, 10572.0], [57.6, 10588.0], [57.7, 10606.0], [57.8, 10615.0], [57.9, 10642.0], [58.0, 10652.0], [58.1, 10656.0], [58.2, 10666.0], [58.3, 10675.0], [58.4, 10678.0], [58.5, 10688.0], [58.6, 10695.0], [58.7, 10697.0], [58.8, 10699.0], [58.9, 10726.0], [59.0, 10734.0], [59.1, 10738.0], [59.2, 10739.0], [59.3, 10745.0], [59.4, 10769.0], [59.5, 10798.0], [59.6, 10800.0], [59.7, 10812.0], [59.8, 10815.0], [59.9, 10825.0], [60.0, 10830.0], [60.1, 10849.0], [60.2, 10857.0], [60.3, 10880.0], [60.4, 10880.0], [60.5, 10897.0], [60.6, 10900.0], [60.7, 10930.0], [60.8, 10932.0], [60.9, 10948.0], [61.0, 10950.0], [61.1, 10963.0], [61.2, 10964.0], [61.3, 10999.0], [61.4, 11011.0], [61.5, 11020.0], [61.6, 11028.0], [61.7, 11048.0], [61.8, 11050.0], [61.9, 11060.0], [62.0, 11063.0], [62.1, 11077.0], [62.2, 11079.0], [62.3, 11110.0], [62.4, 11123.0], [62.5, 11136.0], [62.6, 11140.0], [62.7, 11171.0], [62.8, 11177.0], [62.9, 11179.0], [63.0, 11185.0], [63.1, 11215.0], [63.2, 11233.0], [63.3, 11263.0], [63.4, 11264.0], [63.5, 11280.0], [63.6, 11283.0], [63.7, 11298.0], [63.8, 11303.0], [63.9, 11315.0], [64.0, 11324.0], [64.1, 11340.0], [64.2, 11345.0], [64.3, 11352.0], [64.4, 11356.0], [64.5, 11363.0], [64.6, 11374.0], [64.7, 11377.0], [64.8, 11401.0], [64.9, 11411.0], [65.0, 11421.0], [65.1, 11445.0], [65.2, 11447.0], [65.3, 11473.0], [65.4, 11483.0], [65.5, 11511.0], [65.6, 11515.0], [65.7, 11541.0], [65.8, 11554.0], [65.9, 11558.0], [66.0, 11578.0], [66.1, 11590.0], [66.2, 11592.0], [66.3, 11598.0], [66.4, 11604.0], [66.5, 11622.0], [66.6, 11628.0], [66.7, 11635.0], [66.8, 11663.0], [66.9, 11689.0], [67.0, 11689.0], [67.1, 11701.0], [67.2, 11713.0], [67.3, 11745.0], [67.4, 11747.0], [67.5, 11755.0], [67.6, 11756.0], [67.7, 11757.0], [67.8, 11764.0], [67.9, 11765.0], [68.0, 11766.0], [68.1, 11779.0], [68.2, 11779.0], [68.3, 11785.0], [68.4, 11787.0], [68.5, 11793.0], [68.6, 11793.0], [68.7, 11807.0], [68.8, 11815.0], [68.9, 11819.0], [69.0, 11821.0], [69.1, 11842.0], [69.2, 11843.0], [69.3, 11855.0], [69.4, 11855.0], [69.5, 11867.0], [69.6, 11873.0], [69.7, 11876.0], [69.8, 11882.0], [69.9, 11888.0], [70.0, 11904.0], [70.1, 11928.0], [70.2, 11942.0], [70.3, 11949.0], [70.4, 11966.0], [70.5, 11982.0], [70.6, 11991.0], [70.7, 11995.0], [70.8, 11997.0], [70.9, 12007.0], [71.0, 12019.0], [71.1, 12024.0], [71.2, 12028.0], [71.3, 12031.0], [71.4, 12031.0], [71.5, 12038.0], [71.6, 12049.0], [71.7, 12056.0], [71.8, 12064.0], [71.9, 12069.0], [72.0, 12071.0], [72.1, 12090.0], [72.2, 12091.0], [72.3, 12100.0], [72.4, 12104.0], [72.5, 12119.0], [72.6, 12120.0], [72.7, 12129.0], [72.8, 12139.0], [72.9, 12146.0], [73.0, 12150.0], [73.1, 12165.0], [73.2, 12167.0], [73.3, 12196.0], [73.4, 12201.0], [73.5, 12217.0], [73.6, 12219.0], [73.7, 12220.0], [73.8, 12221.0], [73.9, 12235.0], [74.0, 12237.0], [74.1, 12242.0], [74.2, 12254.0], [74.3, 12269.0], [74.4, 12269.0], [74.5, 12273.0], [74.6, 12274.0], [74.7, 12282.0], [74.8, 12283.0], [74.9, 12284.0], [75.0, 12288.0], [75.1, 12310.0], [75.2, 12323.0], [75.3, 12324.0], [75.4, 12337.0], [75.5, 12351.0], [75.6, 12377.0], [75.7, 12388.0], [75.8, 12392.0], [75.9, 12400.0], [76.0, 12408.0], [76.1, 12410.0], [76.2, 12433.0], [76.3, 12443.0], [76.4, 12449.0], [76.5, 12460.0], [76.6, 12474.0], [76.7, 12518.0], [76.8, 12524.0], [76.9, 12538.0], [77.0, 12543.0], [77.1, 12565.0], [77.2, 12565.0], [77.3, 12569.0], [77.4, 12571.0], [77.5, 12580.0], [77.6, 12593.0], [77.7, 12594.0], [77.8, 12597.0], [77.9, 12600.0], [78.0, 12603.0], [78.1, 12616.0], [78.2, 12616.0], [78.3, 12665.0], [78.4, 12666.0], [78.5, 12675.0], [78.6, 12682.0], [78.7, 12691.0], [78.8, 12695.0], [78.9, 12702.0], [79.0, 12706.0], [79.1, 12709.0], [79.2, 12724.0], [79.3, 12741.0], [79.4, 12764.0], [79.5, 12784.0], [79.6, 12800.0], [79.7, 12829.0], [79.8, 12833.0], [79.9, 12843.0], [80.0, 12852.0], [80.1, 12864.0], [80.2, 12865.0], [80.3, 12875.0], [80.4, 12876.0], [80.5, 12882.0], [80.6, 12897.0], [80.7, 12901.0], [80.8, 12903.0], [80.9, 12914.0], [81.0, 12919.0], [81.1, 12934.0], [81.2, 12938.0], [81.3, 12947.0], [81.4, 12950.0], [81.5, 12956.0], [81.6, 12958.0], [81.7, 12977.0], [81.8, 12980.0], [81.9, 13023.0], [82.0, 13047.0], [82.1, 13112.0], [82.2, 13123.0], [82.3, 13163.0], [82.4, 13186.0], [82.5, 13232.0], [82.6, 13264.0], [82.7, 13286.0], [82.8, 13317.0], [82.9, 13325.0], [83.0, 13351.0], [83.1, 13392.0], [83.2, 13426.0], [83.3, 13444.0], [83.4, 13444.0], [83.5, 13476.0], [83.6, 13489.0], [83.7, 13596.0], [83.8, 13600.0], [83.9, 13699.0], [84.0, 13731.0], [84.1, 13771.0], [84.2, 13788.0], [84.3, 13888.0], [84.4, 13945.0], [84.5, 13964.0], [84.6, 13982.0], [84.7, 14067.0], [84.8, 14068.0], [84.9, 14196.0], [85.0, 14200.0], [85.1, 14215.0], [85.2, 14227.0], [85.3, 14290.0], [85.4, 14305.0], [85.5, 14366.0], [85.6, 14403.0], [85.7, 14410.0], [85.8, 14424.0], [85.9, 14432.0], [86.0, 14432.0], [86.1, 14453.0], [86.2, 14471.0], [86.3, 14517.0], [86.4, 14518.0], [86.5, 14552.0], [86.6, 14567.0], [86.7, 14673.0], [86.8, 14688.0], [86.9, 14707.0], [87.0, 14714.0], [87.1, 14717.0], [87.2, 14738.0], [87.3, 14821.0], [87.4, 14838.0], [87.5, 14877.0], [87.6, 14890.0], [87.7, 14892.0], [87.8, 14906.0], [87.9, 14914.0], [88.0, 14917.0], [88.1, 14962.0], [88.2, 14964.0], [88.3, 14974.0], [88.4, 14985.0], [88.5, 15019.0], [88.6, 15037.0], [88.7, 15084.0], [88.8, 15112.0], [88.9, 15131.0], [89.0, 15132.0], [89.1, 15155.0], [89.2, 15163.0], [89.3, 15175.0], [89.4, 15195.0], [89.5, 15208.0], [89.6, 15236.0], [89.7, 15253.0], [89.8, 15253.0], [89.9, 15255.0], [90.0, 15266.0], [90.1, 15278.0], [90.2, 15348.0], [90.3, 15373.0], [90.4, 15383.0], [90.5, 15421.0], [90.6, 15436.0], [90.7, 15451.0], [90.8, 15464.0], [90.9, 15473.0], [91.0, 15481.0], [91.1, 15515.0], [91.2, 15530.0], [91.3, 15551.0], [91.4, 15564.0], [91.5, 15584.0], [91.6, 15603.0], [91.7, 15614.0], [91.8, 15651.0], [91.9, 15689.0], [92.0, 15703.0], [92.1, 15745.0], [92.2, 15757.0], [92.3, 15843.0], [92.4, 15852.0], [92.5, 15866.0], [92.6, 15881.0], [92.7, 15894.0], [92.8, 15903.0], [92.9, 15926.0], [93.0, 15940.0], [93.1, 15954.0], [93.2, 15964.0], [93.3, 16002.0], [93.4, 16010.0], [93.5, 16010.0], [93.6, 16029.0], [93.7, 16046.0], [93.8, 16174.0], [93.9, 16224.0], [94.0, 16237.0], [94.1, 16238.0], [94.2, 16297.0], [94.3, 16345.0], [94.4, 16408.0], [94.5, 16463.0], [94.6, 16561.0], [94.7, 16569.0], [94.8, 16685.0], [94.9, 16697.0], [95.0, 16727.0], [95.1, 16727.0], [95.2, 16736.0], [95.3, 16776.0], [95.4, 16826.0], [95.5, 16934.0], [95.6, 17026.0], [95.7, 17050.0], [95.8, 17071.0], [95.9, 17072.0], [96.0, 17202.0], [96.1, 17235.0], [96.2, 17481.0], [96.3, 17574.0], [96.4, 17765.0], [96.5, 17776.0], [96.6, 17811.0], [96.7, 18010.0], [96.8, 18022.0], [96.9, 18059.0], [97.0, 18116.0], [97.1, 18117.0], [97.2, 18162.0], [97.3, 18168.0], [97.4, 18275.0], [97.5, 18338.0], [97.6, 18415.0], [97.7, 18508.0], [97.8, 18522.0], [97.9, 18618.0], [98.0, 18743.0], [98.1, 18768.0], [98.2, 19072.0], [98.3, 19488.0], [98.4, 20037.0], [98.5, 20096.0], [98.6, 20514.0], [98.7, 21243.0], [98.8, 22602.0], [98.9, 23261.0], [99.0, 24699.0], [99.1, 25247.0], [99.2, 25767.0], [99.3, 26080.0], [99.4, 27361.0], [99.5, 27453.0], [99.6, 27645.0], [99.7, 28201.0], [99.8, 28243.0], [99.9, 29780.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 26.0, "series": [{"data": [[500.0, 1.0], [600.0, 7.0], [700.0, 9.0], [800.0, 2.0], [900.0, 7.0], [1100.0, 14.0], [1200.0, 6.0], [1300.0, 2.0], [1400.0, 5.0], [1500.0, 2.0], [1600.0, 10.0], [1700.0, 4.0], [1800.0, 4.0], [1900.0, 4.0], [2000.0, 2.0], [2100.0, 8.0], [2300.0, 5.0], [2200.0, 2.0], [2400.0, 4.0], [2500.0, 5.0], [2600.0, 13.0], [2800.0, 19.0], [2700.0, 15.0], [2900.0, 8.0], [3000.0, 9.0], [3100.0, 11.0], [3200.0, 2.0], [3300.0, 18.0], [3400.0, 21.0], [3500.0, 15.0], [3700.0, 14.0], [3600.0, 20.0], [3800.0, 15.0], [3900.0, 4.0], [4000.0, 21.0], [4200.0, 12.0], [4100.0, 20.0], [4300.0, 11.0], [4400.0, 10.0], [4500.0, 7.0], [4600.0, 9.0], [4800.0, 14.0], [4700.0, 10.0], [4900.0, 10.0], [5000.0, 9.0], [5100.0, 5.0], [5200.0, 13.0], [5300.0, 6.0], [5500.0, 8.0], [5400.0, 7.0], [5600.0, 6.0], [5700.0, 3.0], [5800.0, 7.0], [6000.0, 11.0], [6100.0, 1.0], [5900.0, 1.0], [6300.0, 4.0], [6200.0, 7.0], [6400.0, 4.0], [6500.0, 3.0], [6600.0, 3.0], [6700.0, 1.0], [6800.0, 2.0], [6900.0, 1.0], [7000.0, 3.0], [7100.0, 3.0], [7200.0, 1.0], [7300.0, 2.0], [7400.0, 3.0], [7500.0, 9.0], [7600.0, 4.0], [7700.0, 5.0], [7900.0, 8.0], [7800.0, 3.0], [8000.0, 6.0], [8100.0, 7.0], [8300.0, 7.0], [8500.0, 12.0], [8400.0, 6.0], [8600.0, 8.0], [8700.0, 3.0], [8200.0, 10.0], [8900.0, 5.0], [9000.0, 23.0], [9200.0, 10.0], [9100.0, 10.0], [8800.0, 12.0], [9300.0, 21.0], [9500.0, 10.0], [9600.0, 10.0], [9700.0, 7.0], [9400.0, 14.0], [10000.0, 20.0], [10200.0, 24.0], [10100.0, 19.0], [9900.0, 18.0], [9800.0, 9.0], [10300.0, 8.0], [10400.0, 22.0], [10500.0, 10.0], [10600.0, 17.0], [10700.0, 11.0], [10800.0, 15.0], [11000.0, 14.0], [11200.0, 10.0], [10900.0, 12.0], [11100.0, 12.0], [11500.0, 13.0], [11700.0, 23.0], [11600.0, 11.0], [11300.0, 15.0], [11400.0, 11.0], [11800.0, 20.0], [11900.0, 13.0], [12000.0, 22.0], [12200.0, 26.0], [12100.0, 16.0], [12500.0, 19.0], [12600.0, 14.0], [12400.0, 11.0], [12700.0, 11.0], [12300.0, 12.0], [12800.0, 17.0], [12900.0, 17.0], [13100.0, 5.0], [13200.0, 5.0], [13000.0, 4.0], [13300.0, 6.0], [13800.0, 2.0], [13600.0, 3.0], [13500.0, 2.0], [13400.0, 7.0], [13700.0, 4.0], [14200.0, 6.0], [13900.0, 5.0], [14000.0, 3.0], [14300.0, 3.0], [14100.0, 1.0], [14400.0, 10.0], [14700.0, 5.0], [14800.0, 8.0], [14500.0, 6.0], [14600.0, 4.0], [14900.0, 11.0], [15100.0, 10.0], [15200.0, 11.0], [15000.0, 4.0], [15300.0, 4.0], [15500.0, 7.0], [15600.0, 6.0], [15400.0, 10.0], [15700.0, 5.0], [15800.0, 7.0], [15900.0, 7.0], [16000.0, 9.0], [16300.0, 2.0], [16200.0, 6.0], [16100.0, 1.0], [16600.0, 3.0], [16800.0, 1.0], [17000.0, 7.0], [16400.0, 3.0], [17200.0, 3.0], [17400.0, 1.0], [18200.0, 2.0], [18000.0, 5.0], [18400.0, 1.0], [17800.0, 2.0], [17600.0, 1.0], [18600.0, 2.0], [19000.0, 1.0], [19400.0, 1.0], [20000.0, 2.0], [21200.0, 1.0], [22600.0, 1.0], [23200.0, 1.0], [24600.0, 1.0], [25200.0, 1.0], [26000.0, 1.0], [27200.0, 1.0], [27400.0, 1.0], [27600.0, 1.0], [28200.0, 3.0], [30000.0, 1.0], [16900.0, 1.0], [16500.0, 2.0], [16700.0, 7.0], [17700.0, 2.0], [18100.0, 5.0], [17500.0, 1.0], [18300.0, 2.0], [18700.0, 2.0], [18900.0, 1.0], [18500.0, 3.0], [19500.0, 1.0], [20100.0, 1.0], [20500.0, 1.0], [22500.0, 1.0], [23500.0, 1.0], [25300.0, 1.0], [25700.0, 1.0], [27300.0, 1.0], [27500.0, 1.0], [29700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 30000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 53.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 925.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 53.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 522.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 925.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.63725522E12, "maxY": 267.45637583892596, "series": [{"data": [[1.63725522E12, 253.26399999999984]], "isOverall": false, "label": "Group - cadastro de usuarios", "isController": false}, {"data": [[1.63725522E12, 267.45637583892596], [1.63725528E12, 27.0]], "isOverall": false, "label": "Group - produtos", "isController": false}, {"data": [[1.63725522E12, 252.7220000000003]], "isOverall": false, "label": "Group - usuarios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2667.0, "minX": 1.0, "maxY": 20652.333333333332, "series": [{"data": [[2.0, 5352.0], [3.0, 5215.0], [4.0, 3802.0], [5.0, 5235.0], [6.0, 5012.0], [7.0, 5462.0], [8.0, 5270.0], [9.0, 6543.0], [10.0, 6663.0], [11.0, 20500.0], [12.0, 13416.000000000002], [13.0, 11199.0], [14.0, 16045.5], [15.0, 18081.0], [16.0, 11068.0], [17.0, 20652.333333333332], [18.0, 16651.75], [19.0, 12706.0], [20.0, 6428.5], [21.0, 11314.333333333334], [22.0, 15928.0], [23.0, 17184.0], [24.0, 8298.0], [25.0, 11716.0], [26.0, 4541.0], [27.0, 11659.0], [28.0, 11252.5], [29.0, 11918.0], [30.0, 8562.0], [31.0, 12693.0], [33.0, 12946.0], [32.0, 12508.0], [35.0, 11548.0], [34.0, 12493.5], [37.0, 11681.0], [36.0, 11009.0], [39.0, 9832.0], [38.0, 11564.5], [41.0, 15664.0], [40.0, 11378.0], [43.0, 10671.5], [42.0, 14412.0], [45.0, 10413.0], [44.0, 9992.5], [47.0, 10600.0], [46.0, 10411.0], [49.0, 10887.5], [48.0, 9276.0], [51.0, 10650.5], [50.0, 10676.0], [53.0, 13032.0], [52.0, 11205.5], [55.0, 12159.5], [54.0, 12323.5], [57.0, 10762.0], [56.0, 9909.5], [59.0, 10485.333333333334], [58.0, 10267.5], [61.0, 10892.0], [60.0, 10034.5], [63.0, 10760.5], [62.0, 12653.5], [67.0, 10629.0], [66.0, 9930.5], [64.0, 10449.5], [65.0, 5069.0], [71.0, 14955.5], [70.0, 8390.5], [69.0, 8550.0], [68.0, 10277.0], [75.0, 10195.0], [73.0, 14224.0], [74.0, 6315.0], [72.0, 6907.0], [79.0, 10693.0], [78.0, 9378.0], [77.0, 9363.5], [76.0, 14051.0], [83.0, 11556.5], [82.0, 11639.0], [81.0, 10019.5], [80.0, 10145.5], [87.0, 10499.0], [86.0, 10431.5], [85.0, 4552.0], [84.0, 5955.0], [91.0, 11002.5], [90.0, 10985.333333333334], [89.0, 13617.0], [88.0, 11539.5], [95.0, 8766.0], [94.0, 10595.333333333334], [93.0, 8921.5], [92.0, 9809.0], [99.0, 10580.5], [98.0, 14395.333333333334], [97.0, 8966.0], [96.0, 8805.0], [103.0, 9021.333333333334], [102.0, 11532.0], [101.0, 9821.0], [100.0, 13442.0], [107.0, 8675.0], [106.0, 9816.5], [104.0, 13788.0], [105.0, 5322.0], [111.0, 13796.0], [110.0, 10425.5], [109.0, 8836.5], [115.0, 8922.0], [114.0, 7058.0], [113.0, 9268.5], [112.0, 11782.5], [119.0, 9431.0], [118.0, 15019.0], [117.0, 6896.333333333333], [116.0, 4998.0], [123.0, 8779.5], [122.0, 8435.0], [120.0, 11120.0], [121.0, 5536.0], [127.0, 9853.5], [126.0, 8487.5], [125.0, 10465.0], [124.0, 13145.333333333332], [135.0, 10504.5], [134.0, 7749.0], [132.0, 9139.5], [131.0, 8855.5], [129.0, 9606.0], [128.0, 9609.0], [133.0, 5566.0], [130.0, 3773.0], [143.0, 9241.0], [142.0, 8328.5], [141.0, 8388.0], [140.0, 9312.0], [139.0, 8394.5], [138.0, 11635.0], [137.0, 8186.5], [136.0, 7748.5], [151.0, 11258.333333333334], [150.0, 5803.0], [149.0, 9978.5], [148.0, 9029.5], [147.0, 10090.0], [145.0, 7969.5], [144.0, 8533.0], [146.0, 3020.0], [159.0, 8138.0], [158.0, 12118.0], [157.0, 11207.0], [156.0, 10712.0], [155.0, 9743.5], [154.0, 8995.5], [153.0, 10158.0], [152.0, 10661.0], [167.0, 10283.5], [166.0, 10911.0], [165.0, 10358.0], [164.0, 7002.5], [163.0, 10222.5], [162.0, 7239.333333333333], [161.0, 11088.0], [175.0, 7526.5], [174.0, 8277.0], [173.0, 8557.5], [172.0, 11701.5], [171.0, 8982.5], [170.0, 8115.5], [169.0, 7229.0], [168.0, 8328.5], [183.0, 9420.0], [182.0, 10242.0], [181.0, 8556.333333333334], [180.0, 9421.0], [179.0, 6856.5], [178.0, 8000.0], [177.0, 7579.0], [176.0, 7847.0], [191.0, 6886.5], [190.0, 7574.0], [189.0, 7011.5], [188.0, 8837.0], [187.0, 11698.0], [186.0, 10032.5], [184.0, 9697.5], [185.0, 3636.0], [199.0, 8392.0], [198.0, 7939.5], [197.0, 7195.0], [196.0, 7504.5], [195.0, 6883.0], [194.0, 8593.333333333334], [193.0, 8959.0], [192.0, 7163.0], [207.0, 10296.0], [206.0, 8247.0], [205.0, 9595.5], [204.0, 7610.0], [203.0, 7599.5], [202.0, 8864.0], [201.0, 7276.0], [200.0, 8478.5], [215.0, 7898.5], [214.0, 8142.0], [213.0, 11516.5], [212.0, 8275.5], [211.0, 6400.666666666667], [210.0, 7007.5], [209.0, 8101.5], [208.0, 8681.0], [223.0, 7134.5], [222.0, 8039.5], [221.0, 12129.0], [220.0, 11104.666666666666], [219.0, 7405.5], [218.0, 6869.5], [217.0, 6851.0], [216.0, 10288.5], [231.0, 11283.0], [230.0, 8046.5], [229.0, 8737.5], [228.0, 11582.5], [227.0, 9495.5], [226.0, 7540.333333333333], [225.0, 7563.5], [224.0, 8682.0], [239.0, 7272.5], [238.0, 7961.5], [237.0, 7634.5], [236.0, 10189.5], [235.0, 7404.0], [234.0, 8793.0], [233.0, 11514.0], [232.0, 9991.0], [247.0, 7051.0], [246.0, 9413.0], [245.0, 9079.5], [244.0, 9139.5], [243.0, 10317.5], [242.0, 7081.5], [241.0, 9509.0], [240.0, 5485.0], [255.0, 7779.0], [254.0, 8054.0], [253.0, 7919.666666666667], [251.0, 8284.5], [250.0, 10524.0], [249.0, 9922.0], [248.0, 6657.0], [252.0, 4244.0], [270.0, 6132.5], [271.0, 9990.5], [269.0, 7545.5], [268.0, 6246.0], [267.0, 7391.5], [266.0, 6188.0], [265.0, 9000.0], [264.0, 6593.0], [263.0, 5700.5], [257.0, 6592.0], [256.0, 10064.5], [259.0, 7535.5], [258.0, 6485.0], [262.0, 6829.5], [261.0, 7278.0], [260.0, 8974.5], [286.0, 6688.0], [287.0, 8744.0], [284.0, 14196.0], [285.0, 3488.0], [275.0, 8172.0], [273.0, 10161.5], [274.0, 3811.0], [272.0, 7353.5], [283.0, 7097.0], [282.0, 3522.0], [281.0, 8613.5], [280.0, 7484.5], [279.0, 8132.0], [278.0, 9986.0], [277.0, 9515.5], [276.0, 6954.0], [302.0, 8428.0], [303.0, 10262.0], [300.0, 6890.0], [301.0, 2877.0], [291.0, 8853.5], [290.0, 5576.0], [289.0, 9115.5], [288.0, 3314.0], [299.0, 10224.5], [298.0, 9908.5], [297.0, 9953.0], [296.0, 6967.5], [295.0, 6486.0], [294.0, 9867.5], [293.0, 8344.0], [292.0, 8282.0], [318.0, 6854.0], [319.0, 7026.5], [317.0, 11811.666666666666], [316.0, 8084.5], [315.0, 6275.0], [314.0, 6557.5], [313.0, 6709.0], [312.0, 7129.5], [311.0, 8180.5], [305.0, 7828.0], [304.0, 8175.0], [307.0, 6271.0], [306.0, 6443.666666666667], [310.0, 6246.0], [309.0, 7694.5], [308.0, 6240.5], [334.0, 7013.5], [335.0, 9257.5], [333.0, 5481.0], [332.0, 7106.5], [331.0, 15894.0], [330.0, 7290.5], [329.0, 6867.0], [328.0, 5829.0], [327.0, 7383.0], [320.0, 6641.0], [323.0, 6217.5], [322.0, 4148.0], [321.0, 8539.5], [326.0, 6801.5], [325.0, 9722.5], [324.0, 6438.0], [349.0, 9506.0], [351.0, 7031.5], [348.0, 8227.5], [339.0, 6633.5], [338.0, 6166.0], [337.0, 7777.0], [336.0, 6670.333333333333], [347.0, 7125.5], [346.0, 6845.5], [345.0, 5346.5], [344.0, 6407.0], [343.0, 9353.0], [341.0, 9772.0], [342.0, 3636.0], [340.0, 9049.0], [366.0, 5560.0], [367.0, 7084.5], [365.0, 7305.0], [364.0, 9409.0], [363.0, 5426.0], [362.0, 9135.5], [361.0, 8781.5], [360.0, 8019.5], [357.0, 6166.0], [355.0, 7942.0], [354.0, 7783.0], [353.0, 7547.0], [352.0, 5621.75], [359.0, 3112.0], [358.0, 2724.0], [356.0, 6480.0], [382.0, 7355.0], [383.0, 6834.5], [381.0, 7597.5], [380.0, 6197.5], [379.0, 8010.5], [378.0, 9221.5], [377.0, 7097.5], [376.0, 2731.5], [375.0, 5474.5], [369.0, 6562.0], [368.0, 7159.0], [371.0, 5680.5], [370.0, 5658.5], [374.0, 5497.0], [373.0, 6986.333333333334], [372.0, 5773.0], [398.0, 6495.5], [399.0, 6291.0], [397.0, 7082.5], [396.0, 9370.5], [395.0, 9260.0], [394.0, 7494.0], [392.0, 7552.5], [393.0, 2667.0], [391.0, 6106.5], [385.0, 5512.5], [384.0, 4885.0], [387.0, 5927.5], [386.0, 7207.0], [390.0, 7010.5], [389.0, 5458.0], [388.0, 7752.0], [414.0, 5396.0], [415.0, 4337.666666666667], [413.0, 5386.0], [412.0, 7667.5], [411.0, 8762.5], [410.0, 8870.5], [409.0, 6901.5], [408.0, 5895.5], [407.0, 5707.5], [401.0, 9172.0], [400.0, 9173.5], [403.0, 6797.5], [402.0, 9089.5], [406.0, 5160.0], [405.0, 5606.666666666667], [404.0, 7014.0], [430.0, 5320.0], [431.0, 6890.0], [429.0, 4390.0], [428.0, 6337.5], [427.0, 5955.5], [426.0, 6310.5], [425.0, 6932.0], [424.0, 7894.666666666666], [423.0, 6655.5], [417.0, 7630.0], [416.0, 10026.333333333334], [419.0, 8869.0], [418.0, 14373.5], [422.0, 6571.5], [421.0, 8853.5], [420.0, 9510.0], [446.0, 8095.0], [447.0, 8528.0], [445.0, 13649.0], [444.0, 5185.0], [443.0, 8519.5], [442.0, 8018.0], [441.0, 6288.0], [440.0, 5157.5], [439.0, 5689.5], [433.0, 5777.5], [432.0, 4808.5], [435.0, 6972.0], [434.0, 4679.5], [438.0, 5100.666666666667], [437.0, 8403.0], [436.0, 5781.0], [462.0, 7986.5], [463.0, 8120.5], [461.0, 4155.666666666667], [460.0, 7017.0], [459.0, 8326.5], [458.0, 7038.0], [457.0, 7015.5], [456.0, 5679.0], [455.0, 5684.5], [449.0, 6860.0], [448.0, 5670.0], [451.0, 9012.333333333334], [450.0, 5636.0], [454.0, 4667.0], [453.0, 6308.5], [452.0, 5325.5], [478.0, 6182.5], [479.0, 5068.5], [477.0, 4643.0], [476.0, 5020.5], [475.0, 4350.333333333333], [474.0, 8553.0], [473.0, 3343.666666666667], [472.0, 7730.0], [471.0, 4244.0], [465.0, 8197.0], [464.0, 8343.5], [467.0, 5224.5], [466.0, 4612.0], [470.0, 5077.5], [469.0, 4622.5], [468.0, 6925.5], [494.0, 9576.0], [495.0, 8885.0], [493.0, 9559.0], [492.0, 12031.0], [491.0, 12919.0], [490.0, 14410.0], [489.0, 11429.5], [488.0, 5761.0], [487.0, 5089.0], [481.0, 5124.0], [480.0, 4095.0], [483.0, 5068.0], [482.0, 6272.0], [486.0, 5585.0], [485.0, 5647.0], [484.0, 4213.0], [510.0, 12323.0], [511.0, 12442.0], [509.0, 8713.0], [508.0, 12221.0], [507.0, 12123.0], [506.0, 15603.0], [505.0, 12247.0], [504.0, 11949.0], [503.0, 11012.0], [497.0, 11997.0], [496.0, 10849.0], [499.0, 12242.0], [498.0, 12113.0], [502.0, 7847.0], [501.0, 11110.0], [500.0, 15450.0], [540.0, 12741.0], [543.0, 12119.0], [529.0, 12709.0], [528.0, 10280.0], [531.0, 14964.0], [530.0, 12691.0], [533.0, 12687.0], [532.0, 12682.0], [542.0, 8977.0], [541.0, 10018.0], [539.0, 10666.0], [538.0, 11086.0], [537.0, 11458.0], [536.0, 12037.0], [527.0, 12764.0], [513.0, 9065.0], [512.0, 9020.0], [515.0, 12695.0], [514.0, 14996.0], [517.0, 14538.0], [516.0, 12665.0], [519.0, 11263.0], [518.0, 12603.0], [526.0, 10046.0], [525.0, 12666.0], [524.0, 9984.0], [523.0, 11473.0], [522.0, 15584.0], [521.0, 13990.0], [520.0, 10088.0], [535.0, 6896.0], [534.0, 7548.0], [572.0, 8414.0], [575.0, 11785.0], [561.0, 11787.0], [560.0, 11774.0], [563.0, 9462.0], [562.0, 10679.0], [565.0, 10735.0], [564.0, 11982.0], [574.0, 11745.0], [573.0, 11757.0], [571.0, 12074.5], [570.0, 8410.0], [569.0, 11791.0], [568.0, 15536.0], [559.0, 10656.0], [544.0, 11351.0], [546.0, 9685.0], [545.0, 11377.0], [549.0, 12728.0], [547.0, 11362.0], [551.0, 10433.0], [550.0, 14517.5], [558.0, 11779.0], [557.0, 10825.0], [556.0, 11781.0], [555.0, 10499.0], [554.0, 9321.0], [553.0, 10497.0], [552.0, 15132.0], [567.0, 9619.0], [566.0, 15530.0], [604.0, 10734.0], [607.0, 12090.0], [593.0, 10771.0], [592.0, 10726.0], [595.0, 13489.0], [594.0, 9483.0], [597.0, 8541.0], [596.0, 15255.0], [606.0, 15254.0], [605.0, 8496.0], [603.0, 15253.0], [602.0, 12120.0], [601.0, 14341.0], [600.0, 12100.0], [591.0, 9360.0], [577.0, 11628.0], [576.0, 10478.0], [579.0, 11928.0], [578.0, 14673.0], [581.0, 9786.0], [580.0, 14949.0], [583.0, 9404.0], [582.0, 10606.0], [590.0, 10740.0], [589.0, 9392.0], [588.0, 12007.0], [587.0, 11966.0], [586.0, 9349.0], [585.0, 9408.0], [584.0, 11766.0], [599.0, 8536.0], [598.0, 8684.0], [636.0, 14552.0], [639.0, 14305.0], [625.0, 9621.0], [624.0, 10966.0], [627.0, 10999.0], [626.0, 7660.0], [629.0, 11136.0], [628.0, 8693.0], [638.0, 14471.0], [637.0, 15163.0], [635.0, 15150.0], [634.0, 11140.0], [633.0, 12337.0], [632.0, 11063.0], [623.0, 10964.0], [609.0, 12284.0], [608.0, 15236.0], [611.0, 15208.0], [610.0, 12273.0], [613.0, 13596.0], [612.0, 12282.0], [615.0, 10900.0], [614.0, 9565.0], [622.0, 8655.0], [621.0, 12289.0], [620.0, 12324.0], [619.0, 10943.0], [618.0, 13626.0], [617.0, 14707.0], [616.0, 15195.0], [631.0, 12377.0], [630.0, 12338.0], [668.0, 14714.0], [671.0, 14432.0], [657.0, 11084.0], [656.0, 13123.0], [659.0, 14821.0], [658.0, 8568.0], [661.0, 12538.0], [660.0, 13020.0], [670.0, 10083.0], [669.0, 7915.0], [667.0, 14865.0], [666.0, 10925.0], [665.0, 12833.0], [664.0, 13047.0], [655.0, 13888.0], [640.0, 15155.0], [643.0, 14263.0], [641.0, 14917.0], [645.0, 11177.0], [644.0, 14068.0], [647.0, 12310.0], [646.0, 12443.0], [654.0, 14891.0], [653.0, 13952.0], [652.0, 13982.0], [651.0, 11445.0], [649.0, 12005.0], [648.0, 14914.0], [663.0, 12800.0], [662.0, 14877.0], [696.0, 12069.0], [700.0, 9343.0], [703.0, 9306.0], [690.0, 9197.0], [688.0, 12977.0], [692.0, 12053.0], [691.0, 10396.0], [702.0, 9431.0], [701.0, 8218.0], [699.0, 9325.0], [698.0, 8598.0], [697.0, 9338.0], [687.0, 13112.0], [673.0, 11511.0], [672.0, 14432.0], [675.0, 11578.0], [674.0, 13945.0], [677.0, 11608.0], [676.0, 11604.0], [679.0, 11598.0], [678.0, 14408.0], [686.0, 12600.0], [685.0, 13232.0], [684.0, 12593.0], [683.0, 12593.0], [681.0, 14215.0], [680.0, 12049.0], [695.0, 10533.0], [693.0, 12934.0], [732.0, 12898.0], [735.0, 12219.0], [720.0, 10459.0], [723.0, 11020.0], [721.0, 9389.0], [725.0, 10830.0], [724.0, 12217.0], [734.0, 9910.0], [733.0, 11177.0], [731.0, 8466.0], [730.0, 12903.0], [729.0, 11332.0], [728.0, 12914.0], [719.0, 12511.0], [705.0, 10738.0], [704.0, 9334.0], [707.0, 8272.0], [706.0, 12955.0], [709.0, 10857.0], [708.0, 9366.0], [711.0, 11855.0], [710.0, 8286.0], [718.0, 12940.0], [717.0, 12947.0], [716.0, 12956.0], [715.0, 9083.0], [714.0, 10199.0], [713.0, 12950.0], [712.0, 12938.0], [727.0, 12903.0], [726.0, 8396.0], [764.0, 12474.0], [767.0, 11821.0], [753.0, 8667.0], [752.0, 7335.0], [755.0, 10000.0], [754.0, 12866.0], [757.0, 12580.0], [756.0, 9958.0], [766.0, 10085.0], [765.0, 12064.0], [763.0, 12843.0], [762.0, 11942.0], [761.0, 12535.0], [760.0, 10042.0], [751.0, 7420.0], [737.0, 12397.0], [736.0, 12882.0], [739.0, 12167.0], [738.0, 9943.0], [741.0, 11340.0], [740.0, 9887.0], [743.0, 12033.0], [742.0, 12323.0], [750.0, 9962.0], [749.0, 9992.0], [748.0, 9965.0], [747.0, 8661.0], [746.0, 10002.0], [745.0, 12270.0], [744.0, 10000.0], [759.0, 11991.0], [758.0, 12875.0], [794.0, 12565.0], [798.0, 11753.0], [799.0, 8890.0], [785.0, 9302.0], [784.0, 12388.0], [787.0, 12426.5], [786.0, 11048.0], [789.0, 11860.0], [788.0, 12223.5], [797.0, 8882.0], [796.0, 8840.0], [795.0, 12565.0], [793.0, 11817.0], [775.0, 8949.0], [774.0, 10099.0], [773.0, 9019.0], [772.0, 10099.0], [771.0, 11815.0], [770.0, 11819.0], [769.0, 7688.0], [768.0, 10116.0], [783.0, 12675.0], [782.0, 12220.0], [781.0, 12724.0], [780.0, 10152.0], [779.0, 11779.0], [778.0, 8969.0], [777.0, 12834.0], [776.0, 12165.0], [791.0, 12571.0], [790.0, 12616.0], [828.0, 10427.0], [831.0, 9102.0], [817.0, 12254.0], [816.0, 11845.0], [819.0, 12220.0], [818.0, 12223.0], [821.0, 11947.0], [820.0, 9236.0], [830.0, 9075.0], [829.0, 11496.0], [827.0, 9151.0], [826.0, 9180.0], [825.0, 9126.0], [824.0, 12056.0], [815.0, 11689.0], [801.0, 7852.0], [800.0, 8894.0], [803.0, 12518.0], [802.0, 10482.0], [805.0, 10219.0], [804.0, 11805.0], [807.0, 12288.0], [806.0, 10261.0], [814.0, 12241.0], [813.0, 12139.0], [812.0, 11888.0], [811.0, 10548.0], [810.0, 12276.5], [809.0, 11663.0], [808.0, 12269.0], [823.0, 9091.0], [822.0, 9094.0], [860.0, 11303.0], [863.0, 11347.5], [848.0, 9207.0], [850.0, 11441.0], [849.0, 11855.0], [852.0, 9098.0], [851.0, 9047.0], [862.0, 10815.0], [861.0, 10950.0], [859.0, 6784.0], [858.0, 11793.0], [857.0, 11807.0], [856.0, 11345.0], [847.0, 11592.0], [833.0, 9063.0], [832.0, 9077.0], [835.0, 11904.0], [834.0, 7764.0], [837.0, 12023.0], [836.0, 9167.0], [839.0, 11701.0], [838.0, 11629.0], [846.0, 11995.0], [845.0, 11280.0], [844.0, 9189.0], [843.0, 12024.0], [842.0, 12019.0], [841.0, 11421.0], [840.0, 12028.0], [854.0, 11264.0], [853.0, 11842.0], [891.0, 10399.0], [870.0, 7386.0], [879.0, 11028.0], [865.0, 10897.0], [864.0, 11765.0], [867.0, 11752.0], [866.0, 9221.0], [869.0, 11755.0], [868.0, 11622.0], [878.0, 8131.0], [877.0, 10678.0], [876.0, 11060.0], [875.0, 10642.0], [874.0, 9025.0], [873.0, 9510.5], [872.0, 11558.0], [895.0, 10392.0], [881.0, 10840.0], [880.0, 10190.0], [883.0, 9888.0], [882.0, 9790.0], [885.0, 10179.0], [884.0, 10422.0], [894.0, 10880.0], [892.0, 10292.0], [890.0, 10238.0], [889.0, 10402.0], [888.0, 9978.0], [871.0, 11288.0], [887.0, 10897.0], [886.0, 10172.0], [924.0, 9981.0], [922.0, 5688.0], [927.0, 9850.0], [913.0, 10002.0], [912.0, 10469.0], [915.0, 10464.0], [914.0, 9627.0], [917.0, 9986.0], [916.0, 9691.0], [926.0, 10044.0], [925.0, 7590.0], [923.0, 10449.0], [921.0, 7994.0], [920.0, 10451.0], [911.0, 9916.0], [896.0, 8731.0], [899.0, 10569.5], [897.0, 10739.0], [901.0, 9862.0], [900.0, 10725.0], [903.0, 10699.0], [902.0, 10695.0], [910.0, 9653.0], [909.0, 10507.0], [908.0, 10226.0], [907.0, 9003.0], [905.0, 10170.0], [904.0, 9838.0], [919.0, 10472.0], [918.0, 10241.0], [956.0, 8508.0], [959.0, 8867.0], [944.0, 10289.0], [946.0, 6272.0], [945.0, 10073.0], [948.0, 10016.5], [947.0, 9173.0], [958.0, 8504.0], [957.0, 9244.0], [955.0, 9367.0], [954.0, 9150.5], [953.0, 9222.0], [952.0, 9522.0], [943.0, 10174.0], [929.0, 7578.0], [928.0, 9537.0], [931.0, 9878.0], [930.0, 7597.0], [933.0, 10425.0], [932.0, 9785.0], [935.0, 10058.0], [934.0, 10428.0], [942.0, 10308.0], [941.0, 10307.0], [939.0, 9944.0], [938.0, 10234.0], [937.0, 10424.0], [936.0, 9936.0], [951.0, 9668.0], [949.0, 7508.0], [966.0, 5555.0], [963.0, 6610.0], [965.0, 7917.0], [964.0, 8304.5], [962.0, 6432.0], [961.0, 6681.5], [960.0, 9085.0], [974.0, 8300.0], [973.0, 8304.0], [972.0, 8308.0], [971.0, 8136.5], [970.0, 6482.0], [969.0, 8593.0], [968.0, 8417.0], [986.0, 5481.0], [977.0, 7989.0], [976.0, 8105.0], [979.0, 7426.5], [978.0, 7630.0], [985.0, 5764.0], [984.0, 5602.0], [967.0, 8593.0], [983.0, 5752.5], [982.0, 6425.0], [981.0, 6186.0], [980.0, 6999.0], [1.0, 4705.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[420.14866666666643, 9277.40266666667]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 986.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 175.78333333333333, "minX": 1.63725522E12, "maxY": 455028.1, "series": [{"data": [[1.63725522E12, 455028.1], [1.63725528E12, 8047.166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63725522E12, 5967.9], [1.63725528E12, 175.78333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5235.905660377362, "minX": 1.63725522E12, "maxY": 9425.43261921217, "series": [{"data": [[1.63725522E12, 9425.43261921217], [1.63725528E12, 5235.905660377362]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5235.566037735849, "minX": 1.63725522E12, "maxY": 9182.879060124396, "series": [{"data": [[1.63725522E12, 9182.879060124396], [1.63725528E12, 5235.566037735849]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3696.514858327581, "minX": 1.63725522E12, "maxY": 3746.1132075471696, "series": [{"data": [[1.63725522E12, 3696.514858327581], [1.63725528E12, 3746.1132075471696]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 582.0, "minX": 1.63725522E12, "maxY": 30099.0, "series": [{"data": [[1.63725522E12, 30099.0], [1.63725528E12, 7007.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63725522E12, 582.0], [1.63725528E12, 3581.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63725522E12, 8081.899999999999], [1.63725528E12, 6479.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63725522E12, 28073.119999999988], [1.63725528E12, 7007.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63725522E12, 9795.499999999995], [1.63725528E12, 6653.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 921.0, "minX": 2.0, "maxY": 28201.0, "series": [{"data": [[2.0, 11728.0], [8.0, 7130.0], [37.0, 1613.0], [9.0, 28201.0], [42.0, 2481.0], [3.0, 26564.0], [13.0, 8696.0], [53.0, 5235.0], [14.0, 8202.5], [60.0, 3171.0], [15.0, 17987.5], [4.0, 2508.0], [72.0, 14801.0], [78.0, 3480.5], [5.0, 5889.0], [84.0, 4048.0], [22.0, 15900.0], [95.0, 12834.0], [92.0, 11784.0], [99.0, 4997.0], [25.0, 17574.0], [7.0, 5717.0], [31.0, 921.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 16697.0], [2.0, 18229.0], [37.0, 10815.0], [9.0, 20449.0], [3.0, 18618.0], [13.0, 11608.0], [14.0, 15732.5], [60.0, 10024.5], [15.0, 18017.0], [251.0, 11766.0], [4.0, 13671.0], [16.0, 14447.0], [72.0, 12082.0], [5.0, 20514.0], [86.0, 11695.0], [22.0, 16104.5], [95.0, 10843.5], [23.0, 12524.0], [92.0, 12081.0], [25.0, 13999.5], [105.0, 11377.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 251.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 920.0, "minX": 2.0, "maxY": 20514.0, "series": [{"data": [[2.0, 7112.0], [8.0, 7130.0], [37.0, 1611.0], [9.0, 5932.0], [42.0, 2480.5], [3.0, 6642.5], [13.0, 8681.0], [53.0, 5235.0], [14.0, 8202.5], [60.0, 3171.0], [15.0, 10162.0], [4.0, 2508.0], [72.0, 4188.0], [78.0, 3473.5], [5.0, 5606.0], [84.0, 4040.5], [22.0, 9287.5], [95.0, 12834.0], [92.0, 4590.5], [99.0, 4996.0], [25.0, 3785.0], [7.0, 5717.0], [31.0, 920.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[8.0, 16697.0], [2.0, 18229.0], [37.0, 10815.0], [9.0, 20443.0], [3.0, 18618.0], [13.0, 11608.0], [14.0, 15732.5], [60.0, 10024.5], [15.0, 17811.0], [251.0, 11766.0], [4.0, 13671.0], [16.0, 13759.0], [72.0, 12082.0], [5.0, 20514.0], [86.0, 11646.0], [22.0, 16004.0], [95.0, 10843.5], [23.0, 12524.0], [92.0, 12068.5], [25.0, 13999.0], [105.0, 11377.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 251.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.63725522E12, "maxY": 25.0, "series": [{"data": [[1.63725522E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.63725522E12, "maxY": 15.416666666666666, "series": [{"data": [[1.63725522E12, 7.75], [1.63725528E12, 0.8833333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63725522E12, 0.95]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.63725522E12, 15.416666666666666]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.63725522E12, "maxY": 15.416666666666666, "series": [{"data": [[1.63725522E12, 8.7], [1.63725528E12, 0.8833333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.63725522E12, 15.416666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.8833333333333333, "minX": 1.63725522E12, "maxY": 15.416666666666666, "series": [{"data": [[1.63725522E12, 8.7], [1.63725528E12, 0.8833333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63725522E12, 15.416666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

