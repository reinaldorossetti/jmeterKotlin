/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2272.0, "minX": 0.0, "maxY": 114961.0, "series": [{"data": [[0.0, 2272.0], [0.1, 2274.0], [0.2, 3019.0], [0.3, 3719.0], [0.4, 3770.0], [0.5, 3790.0], [0.6, 3954.0], [0.7, 3963.0], [0.8, 4126.0], [0.9, 4200.0], [1.0, 4255.0], [1.1, 4258.0], [1.2, 4416.0], [1.3, 4466.0], [1.4, 4496.0], [1.5, 4508.0], [1.6, 4531.0], [1.7, 4553.0], [1.8, 4572.0], [1.9, 4580.0], [2.0, 4584.0], [2.1, 4591.0], [2.2, 4754.0], [2.3, 4780.0], [2.4, 4957.0], [2.5, 5000.0], [2.6, 5123.0], [2.7, 5330.0], [2.8, 5368.0], [2.9, 5408.0], [3.0, 5414.0], [3.1, 5540.0], [3.2, 5560.0], [3.3, 5665.0], [3.4, 5673.0], [3.5, 5683.0], [3.6, 5726.0], [3.7, 5747.0], [3.8, 5781.0], [3.9, 5836.0], [4.0, 5905.0], [4.1, 6001.0], [4.2, 6016.0], [4.3, 6092.0], [4.4, 6093.0], [4.5, 6099.0], [4.6, 6108.0], [4.7, 6113.0], [4.8, 6124.0], [4.9, 6169.0], [5.0, 6228.0], [5.1, 6284.0], [5.2, 6324.0], [5.3, 6341.0], [5.4, 6423.0], [5.5, 6664.0], [5.6, 6709.0], [5.7, 6731.0], [5.8, 6744.0], [5.9, 6804.0], [6.0, 6827.0], [6.1, 6828.0], [6.2, 6934.0], [6.3, 6935.0], [6.4, 7007.0], [6.5, 7022.0], [6.6, 7090.0], [6.7, 7123.0], [6.8, 7158.0], [6.9, 7197.0], [7.0, 7274.0], [7.1, 7280.0], [7.2, 7320.0], [7.3, 7349.0], [7.4, 7387.0], [7.5, 7394.0], [7.6, 7432.0], [7.7, 7448.0], [7.8, 7478.0], [7.9, 7481.0], [8.0, 7564.0], [8.1, 7574.0], [8.2, 7580.0], [8.3, 7600.0], [8.4, 7653.0], [8.5, 7728.0], [8.6, 7753.0], [8.7, 7753.0], [8.8, 7798.0], [8.9, 7811.0], [9.0, 7864.0], [9.1, 7869.0], [9.2, 8090.0], [9.3, 8129.0], [9.4, 8204.0], [9.5, 8270.0], [9.6, 8373.0], [9.7, 8375.0], [9.8, 8386.0], [9.9, 8401.0], [10.0, 8421.0], [10.1, 8421.0], [10.2, 8508.0], [10.3, 8536.0], [10.4, 8613.0], [10.5, 8639.0], [10.6, 8699.0], [10.7, 8801.0], [10.8, 8858.0], [10.9, 8944.0], [11.0, 9004.0], [11.1, 9010.0], [11.2, 9061.0], [11.3, 9086.0], [11.4, 9134.0], [11.5, 9158.0], [11.6, 9195.0], [11.7, 9195.0], [11.8, 9239.0], [11.9, 9382.0], [12.0, 9538.0], [12.1, 9569.0], [12.2, 9623.0], [12.3, 9661.0], [12.4, 9694.0], [12.5, 9708.0], [12.6, 9792.0], [12.7, 9812.0], [12.8, 9874.0], [12.9, 9891.0], [13.0, 9951.0], [13.1, 9980.0], [13.2, 10092.0], [13.3, 10103.0], [13.4, 10146.0], [13.5, 10171.0], [13.6, 10306.0], [13.7, 10350.0], [13.8, 10388.0], [13.9, 10397.0], [14.0, 10416.0], [14.1, 10487.0], [14.2, 10498.0], [14.3, 10524.0], [14.4, 10608.0], [14.5, 10616.0], [14.6, 10669.0], [14.7, 10684.0], [14.8, 10716.0], [14.9, 10718.0], [15.0, 10750.0], [15.1, 10797.0], [15.2, 10811.0], [15.3, 10819.0], [15.4, 10875.0], [15.5, 10877.0], [15.6, 10881.0], [15.7, 10889.0], [15.8, 10935.0], [15.9, 10935.0], [16.0, 10964.0], [16.1, 11012.0], [16.2, 11148.0], [16.3, 11183.0], [16.4, 11295.0], [16.5, 11343.0], [16.6, 11349.0], [16.7, 11368.0], [16.8, 11413.0], [16.9, 11422.0], [17.0, 11659.0], [17.1, 11668.0], [17.2, 11675.0], [17.3, 11684.0], [17.4, 11711.0], [17.5, 11787.0], [17.6, 11900.0], [17.7, 11918.0], [17.8, 11939.0], [17.9, 11966.0], [18.0, 12188.0], [18.1, 12190.0], [18.2, 12276.0], [18.3, 12331.0], [18.4, 12367.0], [18.5, 12387.0], [18.6, 12409.0], [18.7, 12417.0], [18.8, 12468.0], [18.9, 12685.0], [19.0, 12771.0], [19.1, 12828.0], [19.2, 12836.0], [19.3, 12841.0], [19.4, 12860.0], [19.5, 12873.0], [19.6, 12877.0], [19.7, 12884.0], [19.8, 12907.0], [19.9, 12915.0], [20.0, 12920.0], [20.1, 12921.0], [20.2, 12935.0], [20.3, 12948.0], [20.4, 12972.0], [20.5, 12973.0], [20.6, 13032.0], [20.7, 13034.0], [20.8, 13047.0], [20.9, 13049.0], [21.0, 13088.0], [21.1, 13100.0], [21.2, 13123.0], [21.3, 13180.0], [21.4, 13192.0], [21.5, 13234.0], [21.6, 13388.0], [21.7, 13403.0], [21.8, 13421.0], [21.9, 13448.0], [22.0, 13486.0], [22.1, 13499.0], [22.2, 13506.0], [22.3, 13558.0], [22.4, 13761.0], [22.5, 13779.0], [22.6, 13903.0], [22.7, 13963.0], [22.8, 14044.0], [22.9, 14059.0], [23.0, 14081.0], [23.1, 14094.0], [23.2, 14118.0], [23.3, 14126.0], [23.4, 14148.0], [23.5, 14194.0], [23.6, 14231.0], [23.7, 14264.0], [23.8, 14363.0], [23.9, 14365.0], [24.0, 14370.0], [24.1, 14373.0], [24.2, 14380.0], [24.3, 14397.0], [24.4, 14445.0], [24.5, 14463.0], [24.6, 14486.0], [24.7, 14509.0], [24.8, 14555.0], [24.9, 14573.0], [25.0, 14635.0], [25.1, 14659.0], [25.2, 14687.0], [25.3, 14713.0], [25.4, 14750.0], [25.5, 14761.0], [25.6, 14806.0], [25.7, 14809.0], [25.8, 14909.0], [25.9, 14916.0], [26.0, 14933.0], [26.1, 14944.0], [26.2, 14955.0], [26.3, 14989.0], [26.4, 15026.0], [26.5, 15030.0], [26.6, 15045.0], [26.7, 15069.0], [26.8, 15188.0], [26.9, 15193.0], [27.0, 15221.0], [27.1, 15222.0], [27.2, 15245.0], [27.3, 15253.0], [27.4, 15277.0], [27.5, 15281.0], [27.6, 15306.0], [27.7, 15308.0], [27.8, 15314.0], [27.9, 15349.0], [28.0, 15355.0], [28.1, 15361.0], [28.2, 15366.0], [28.3, 15392.0], [28.4, 15411.0], [28.5, 15414.0], [28.6, 15417.0], [28.7, 15434.0], [28.8, 15466.0], [28.9, 15497.0], [29.0, 15535.0], [29.1, 15548.0], [29.2, 15565.0], [29.3, 15571.0], [29.4, 15579.0], [29.5, 15583.0], [29.6, 15603.0], [29.7, 15610.0], [29.8, 15622.0], [29.9, 15649.0], [30.0, 15656.0], [30.1, 15657.0], [30.2, 15695.0], [30.3, 15701.0], [30.4, 15708.0], [30.5, 15713.0], [30.6, 15718.0], [30.7, 15748.0], [30.8, 15771.0], [30.9, 15777.0], [31.0, 15781.0], [31.1, 15782.0], [31.2, 15796.0], [31.3, 15798.0], [31.4, 15875.0], [31.5, 15917.0], [31.6, 15929.0], [31.7, 15956.0], [31.8, 15975.0], [31.9, 15978.0], [32.0, 15984.0], [32.1, 16013.0], [32.2, 16022.0], [32.3, 16028.0], [32.4, 16048.0], [32.5, 16052.0], [32.6, 16056.0], [32.7, 16067.0], [32.8, 16078.0], [32.9, 16085.0], [33.0, 16142.0], [33.1, 16153.0], [33.2, 16263.0], [33.3, 16351.0], [33.4, 16407.0], [33.5, 16425.0], [33.6, 16454.0], [33.7, 16464.0], [33.8, 16467.0], [33.9, 16469.0], [34.0, 16543.0], [34.1, 16608.0], [34.2, 16618.0], [34.3, 16622.0], [34.4, 16631.0], [34.5, 16652.0], [34.6, 16692.0], [34.7, 16810.0], [34.8, 16815.0], [34.9, 16826.0], [35.0, 16867.0], [35.1, 16889.0], [35.2, 16909.0], [35.3, 17056.0], [35.4, 17081.0], [35.5, 17170.0], [35.6, 17200.0], [35.7, 17237.0], [35.8, 17237.0], [35.9, 17266.0], [36.0, 17269.0], [36.1, 17278.0], [36.2, 17305.0], [36.3, 17330.0], [36.4, 17335.0], [36.5, 17395.0], [36.6, 17414.0], [36.7, 17515.0], [36.8, 17558.0], [36.9, 17605.0], [37.0, 17610.0], [37.1, 17631.0], [37.2, 17637.0], [37.3, 17643.0], [37.4, 17673.0], [37.5, 17676.0], [37.6, 17704.0], [37.7, 17737.0], [37.8, 17742.0], [37.9, 17758.0], [38.0, 17761.0], [38.1, 17795.0], [38.2, 17797.0], [38.3, 17802.0], [38.4, 17803.0], [38.5, 17805.0], [38.6, 17832.0], [38.7, 17886.0], [38.8, 17905.0], [38.9, 18085.0], [39.0, 18099.0], [39.1, 18126.0], [39.2, 18136.0], [39.3, 18289.0], [39.4, 18372.0], [39.5, 18469.0], [39.6, 18650.0], [39.7, 18698.0], [39.8, 18698.0], [39.9, 18723.0], [40.0, 18750.0], [40.1, 18788.0], [40.2, 18874.0], [40.3, 18895.0], [40.4, 18924.0], [40.5, 18975.0], [40.6, 19135.0], [40.7, 19188.0], [40.8, 19227.0], [40.9, 19274.0], [41.0, 19288.0], [41.1, 19307.0], [41.2, 19338.0], [41.3, 19396.0], [41.4, 19437.0], [41.5, 19484.0], [41.6, 19505.0], [41.7, 19547.0], [41.8, 19593.0], [41.9, 19615.0], [42.0, 19616.0], [42.1, 19628.0], [42.2, 19638.0], [42.3, 19676.0], [42.4, 19689.0], [42.5, 19741.0], [42.6, 19763.0], [42.7, 19782.0], [42.8, 19811.0], [42.9, 19835.0], [43.0, 19847.0], [43.1, 19888.0], [43.2, 19893.0], [43.3, 19938.0], [43.4, 19945.0], [43.5, 19982.0], [43.6, 20013.0], [43.7, 20078.0], [43.8, 20079.0], [43.9, 20107.0], [44.0, 20136.0], [44.1, 20206.0], [44.2, 20274.0], [44.3, 20343.0], [44.4, 20356.0], [44.5, 20427.0], [44.6, 20457.0], [44.7, 20546.0], [44.8, 20546.0], [44.9, 20557.0], [45.0, 20563.0], [45.1, 20610.0], [45.2, 20622.0], [45.3, 20650.0], [45.4, 20672.0], [45.5, 20778.0], [45.6, 20817.0], [45.7, 20824.0], [45.8, 20838.0], [45.9, 20895.0], [46.0, 20914.0], [46.1, 20955.0], [46.2, 20981.0], [46.3, 21103.0], [46.4, 21112.0], [46.5, 21126.0], [46.6, 21149.0], [46.7, 21247.0], [46.8, 21269.0], [46.9, 21318.0], [47.0, 21322.0], [47.1, 21339.0], [47.2, 21350.0], [47.3, 21395.0], [47.4, 21406.0], [47.5, 21437.0], [47.6, 21458.0], [47.7, 21468.0], [47.8, 21492.0], [47.9, 21511.0], [48.0, 21513.0], [48.1, 21517.0], [48.2, 21520.0], [48.3, 21530.0], [48.4, 21543.0], [48.5, 21579.0], [48.6, 21581.0], [48.7, 21616.0], [48.8, 21625.0], [48.9, 21682.0], [49.0, 21698.0], [49.1, 21729.0], [49.2, 21770.0], [49.3, 21864.0], [49.4, 21867.0], [49.5, 21913.0], [49.6, 21915.0], [49.7, 21926.0], [49.8, 21938.0], [49.9, 21981.0], [50.0, 21996.0], [50.1, 22047.0], [50.2, 22171.0], [50.3, 22224.0], [50.4, 22250.0], [50.5, 22468.0], [50.6, 22479.0], [50.7, 22535.0], [50.8, 22545.0], [50.9, 22635.0], [51.0, 22642.0], [51.1, 22680.0], [51.2, 22707.0], [51.3, 22758.0], [51.4, 22759.0], [51.5, 22788.0], [51.6, 22790.0], [51.7, 22869.0], [51.8, 22873.0], [51.9, 22901.0], [52.0, 22906.0], [52.1, 22949.0], [52.2, 22973.0], [52.3, 23030.0], [52.4, 23079.0], [52.5, 23247.0], [52.6, 23249.0], [52.7, 23289.0], [52.8, 23308.0], [52.9, 23321.0], [53.0, 23343.0], [53.1, 23347.0], [53.2, 23349.0], [53.3, 23407.0], [53.4, 23422.0], [53.5, 23442.0], [53.6, 23519.0], [53.7, 23537.0], [53.8, 23539.0], [53.9, 23569.0], [54.0, 23602.0], [54.1, 23675.0], [54.2, 23810.0], [54.3, 23882.0], [54.4, 23914.0], [54.5, 23936.0], [54.6, 24029.0], [54.7, 24052.0], [54.8, 24055.0], [54.9, 24109.0], [55.0, 24119.0], [55.1, 24174.0], [55.2, 24178.0], [55.3, 24411.0], [55.4, 24423.0], [55.5, 24429.0], [55.6, 24433.0], [55.7, 24530.0], [55.8, 24567.0], [55.9, 24642.0], [56.0, 24658.0], [56.1, 24732.0], [56.2, 24798.0], [56.3, 24824.0], [56.4, 24968.0], [56.5, 25010.0], [56.6, 25014.0], [56.7, 25056.0], [56.8, 25058.0], [56.9, 25086.0], [57.0, 25141.0], [57.1, 25179.0], [57.2, 25216.0], [57.3, 25499.0], [57.4, 25511.0], [57.5, 25538.0], [57.6, 25782.0], [57.7, 25797.0], [57.8, 25828.0], [57.9, 25859.0], [58.0, 25890.0], [58.1, 25934.0], [58.2, 25953.0], [58.3, 26045.0], [58.4, 26133.0], [58.5, 26184.0], [58.6, 26222.0], [58.7, 26324.0], [58.8, 26361.0], [58.9, 26372.0], [59.0, 26382.0], [59.1, 26450.0], [59.2, 26524.0], [59.3, 26611.0], [59.4, 26618.0], [59.5, 26695.0], [59.6, 26762.0], [59.7, 26792.0], [59.8, 26819.0], [59.9, 26854.0], [60.0, 26862.0], [60.1, 26890.0], [60.2, 26923.0], [60.3, 26928.0], [60.4, 26986.0], [60.5, 27036.0], [60.6, 27058.0], [60.7, 27067.0], [60.8, 27112.0], [60.9, 27204.0], [61.0, 27252.0], [61.1, 27341.0], [61.2, 27427.0], [61.3, 27467.0], [61.4, 27600.0], [61.5, 27614.0], [61.6, 27614.0], [61.7, 27643.0], [61.8, 27688.0], [61.9, 27777.0], [62.0, 27865.0], [62.1, 27957.0], [62.2, 27985.0], [62.3, 28014.0], [62.4, 28062.0], [62.5, 28109.0], [62.6, 28119.0], [62.7, 28166.0], [62.8, 28254.0], [62.9, 28372.0], [63.0, 28398.0], [63.1, 28448.0], [63.2, 28450.0], [63.3, 28528.0], [63.4, 28555.0], [63.5, 28620.0], [63.6, 28630.0], [63.7, 28655.0], [63.8, 28670.0], [63.9, 28827.0], [64.0, 29104.0], [64.1, 29214.0], [64.2, 29226.0], [64.3, 29425.0], [64.4, 29464.0], [64.5, 29549.0], [64.6, 29642.0], [64.7, 29770.0], [64.8, 29778.0], [64.9, 29782.0], [65.0, 29786.0], [65.1, 29838.0], [65.2, 29886.0], [65.3, 29903.0], [65.4, 29941.0], [65.5, 29979.0], [65.6, 30015.0], [65.7, 30102.0], [65.8, 30167.0], [65.9, 30461.0], [66.0, 30473.0], [66.1, 30602.0], [66.2, 30664.0], [66.3, 30714.0], [66.4, 30721.0], [66.5, 30788.0], [66.6, 30814.0], [66.7, 30850.0], [66.8, 30864.0], [66.9, 30998.0], [67.0, 31027.0], [67.1, 31074.0], [67.2, 31083.0], [67.3, 31145.0], [67.4, 31158.0], [67.5, 31172.0], [67.6, 31180.0], [67.7, 31243.0], [67.8, 31299.0], [67.9, 31334.0], [68.0, 31381.0], [68.1, 31488.0], [68.2, 31488.0], [68.3, 31515.0], [68.4, 31679.0], [68.5, 31747.0], [68.6, 31749.0], [68.7, 31781.0], [68.8, 31786.0], [68.9, 31791.0], [69.0, 31850.0], [69.1, 31918.0], [69.2, 31938.0], [69.3, 31957.0], [69.4, 32020.0], [69.5, 32057.0], [69.6, 32077.0], [69.7, 32121.0], [69.8, 32144.0], [69.9, 32168.0], [70.0, 32193.0], [70.1, 32220.0], [70.2, 32282.0], [70.3, 32386.0], [70.4, 32423.0], [70.5, 32648.0], [70.6, 32688.0], [70.7, 32693.0], [70.8, 32774.0], [70.9, 32811.0], [71.0, 32815.0], [71.1, 32910.0], [71.2, 33024.0], [71.3, 33217.0], [71.4, 33314.0], [71.5, 33562.0], [71.6, 33645.0], [71.7, 33743.0], [71.8, 33773.0], [71.9, 33892.0], [72.0, 33914.0], [72.1, 33959.0], [72.2, 33989.0], [72.3, 34062.0], [72.4, 34172.0], [72.5, 34246.0], [72.6, 34250.0], [72.7, 34412.0], [72.8, 34438.0], [72.9, 34536.0], [73.0, 34594.0], [73.1, 34835.0], [73.2, 34962.0], [73.3, 35364.0], [73.4, 35538.0], [73.5, 35630.0], [73.6, 35643.0], [73.7, 35790.0], [73.8, 35817.0], [73.9, 36114.0], [74.0, 36225.0], [74.1, 36316.0], [74.2, 36546.0], [74.3, 36867.0], [74.4, 36881.0], [74.5, 36902.0], [74.6, 37089.0], [74.7, 37287.0], [74.8, 37303.0], [74.9, 37382.0], [75.0, 37513.0], [75.1, 37727.0], [75.2, 37734.0], [75.3, 37800.0], [75.4, 37834.0], [75.5, 38032.0], [75.6, 38087.0], [75.7, 38198.0], [75.8, 38284.0], [75.9, 38343.0], [76.0, 38489.0], [76.1, 38569.0], [76.2, 38613.0], [76.3, 38766.0], [76.4, 38794.0], [76.5, 38948.0], [76.6, 38957.0], [76.7, 38999.0], [76.8, 39052.0], [76.9, 39553.0], [77.0, 39583.0], [77.1, 39904.0], [77.2, 39914.0], [77.3, 39964.0], [77.4, 39993.0], [77.5, 40205.0], [77.6, 40219.0], [77.7, 40274.0], [77.8, 40302.0], [77.9, 40441.0], [78.0, 40457.0], [78.1, 40478.0], [78.2, 40528.0], [78.3, 40537.0], [78.4, 40647.0], [78.5, 40652.0], [78.6, 40688.0], [78.7, 40780.0], [78.8, 40854.0], [78.9, 40908.0], [79.0, 40976.0], [79.1, 41146.0], [79.2, 41159.0], [79.3, 41259.0], [79.4, 41362.0], [79.5, 41477.0], [79.6, 41703.0], [79.7, 41800.0], [79.8, 41830.0], [79.9, 42031.0], [80.0, 42035.0], [80.1, 42049.0], [80.2, 42057.0], [80.3, 42095.0], [80.4, 42129.0], [80.5, 42198.0], [80.6, 42285.0], [80.7, 42387.0], [80.8, 42403.0], [80.9, 42529.0], [81.0, 42540.0], [81.1, 42631.0], [81.2, 42633.0], [81.3, 42690.0], [81.4, 42717.0], [81.5, 42726.0], [81.6, 43002.0], [81.7, 43135.0], [81.8, 43138.0], [81.9, 43275.0], [82.0, 43278.0], [82.1, 43376.0], [82.2, 43486.0], [82.3, 43653.0], [82.4, 43734.0], [82.5, 43776.0], [82.6, 43803.0], [82.7, 43917.0], [82.8, 43961.0], [82.9, 44272.0], [83.0, 44491.0], [83.1, 44637.0], [83.2, 44730.0], [83.3, 44936.0], [83.4, 45005.0], [83.5, 45169.0], [83.6, 45217.0], [83.7, 45242.0], [83.8, 45341.0], [83.9, 45471.0], [84.0, 45506.0], [84.1, 45615.0], [84.2, 45647.0], [84.3, 45723.0], [84.4, 45765.0], [84.5, 45813.0], [84.6, 45870.0], [84.7, 45875.0], [84.8, 45913.0], [84.9, 45997.0], [85.0, 46145.0], [85.1, 46604.0], [85.2, 46643.0], [85.3, 46688.0], [85.4, 46719.0], [85.5, 46903.0], [85.6, 46964.0], [85.7, 47093.0], [85.8, 47122.0], [85.9, 47295.0], [86.0, 47307.0], [86.1, 47708.0], [86.2, 47811.0], [86.3, 47854.0], [86.4, 47871.0], [86.5, 47887.0], [86.6, 47898.0], [86.7, 47961.0], [86.8, 47974.0], [86.9, 48031.0], [87.0, 48153.0], [87.1, 48270.0], [87.2, 48313.0], [87.3, 48597.0], [87.4, 48628.0], [87.5, 48650.0], [87.6, 48702.0], [87.7, 48749.0], [87.8, 48950.0], [87.9, 49216.0], [88.0, 49268.0], [88.1, 49360.0], [88.2, 49825.0], [88.3, 50096.0], [88.4, 50153.0], [88.5, 50646.0], [88.6, 50709.0], [88.7, 50779.0], [88.8, 50840.0], [88.9, 50962.0], [89.0, 51066.0], [89.1, 51185.0], [89.2, 51248.0], [89.3, 51628.0], [89.4, 51711.0], [89.5, 51719.0], [89.6, 51746.0], [89.7, 51819.0], [89.8, 52057.0], [89.9, 52059.0], [90.0, 52394.0], [90.1, 52409.0], [90.2, 52581.0], [90.3, 52629.0], [90.4, 52715.0], [90.5, 52809.0], [90.6, 52900.0], [90.7, 52913.0], [90.8, 52946.0], [90.9, 52949.0], [91.0, 53010.0], [91.1, 53057.0], [91.2, 53085.0], [91.3, 53191.0], [91.4, 53249.0], [91.5, 53333.0], [91.6, 53507.0], [91.7, 53554.0], [91.8, 53579.0], [91.9, 53601.0], [92.0, 53725.0], [92.1, 53831.0], [92.2, 54026.0], [92.3, 54126.0], [92.4, 54221.0], [92.5, 54375.0], [92.6, 54568.0], [92.7, 54646.0], [92.8, 54732.0], [92.9, 54760.0], [93.0, 54837.0], [93.1, 54854.0], [93.2, 55109.0], [93.3, 55384.0], [93.4, 55502.0], [93.5, 55539.0], [93.6, 55600.0], [93.7, 55701.0], [93.8, 56343.0], [93.9, 56564.0], [94.0, 56952.0], [94.1, 57239.0], [94.2, 57363.0], [94.3, 58507.0], [94.4, 58887.0], [94.5, 59267.0], [94.6, 59650.0], [94.7, 60214.0], [94.8, 60545.0], [94.9, 60647.0], [95.0, 60877.0], [95.1, 61151.0], [95.2, 63361.0], [95.3, 63414.0], [95.4, 64353.0], [95.5, 64933.0], [95.6, 65395.0], [95.7, 65507.0], [95.8, 66510.0], [95.9, 66933.0], [96.0, 67417.0], [96.1, 68283.0], [96.2, 68377.0], [96.3, 68422.0], [96.4, 69127.0], [96.5, 70075.0], [96.6, 70514.0], [96.7, 71533.0], [96.8, 72144.0], [96.9, 72221.0], [97.0, 73245.0], [97.1, 76042.0], [97.2, 79806.0], [97.3, 80091.0], [97.4, 80822.0], [97.5, 81045.0], [97.6, 83540.0], [97.7, 84315.0], [97.8, 84779.0], [97.9, 88015.0], [98.0, 89031.0], [98.1, 89206.0], [98.2, 92977.0], [98.3, 93143.0], [98.4, 95524.0], [98.5, 95630.0], [98.6, 96217.0], [98.7, 96401.0], [98.8, 97355.0], [98.9, 100902.0], [99.0, 102884.0], [99.1, 103049.0], [99.2, 105280.0], [99.3, 105307.0], [99.4, 106470.0], [99.5, 106545.0], [99.6, 107072.0], [99.7, 108201.0], [99.8, 112193.0], [99.9, 112432.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2200.0, "maxY": 16.0, "series": [{"data": [[68300.0, 2.0], [71500.0, 2.0], [84300.0, 2.0], [95500.0, 1.0], [32900.0, 1.0], [34500.0, 3.0], [33700.0, 2.0], [35300.0, 1.0], [36100.0, 1.0], [36900.0, 1.0], [37700.0, 3.0], [38500.0, 1.0], [40100.0, 1.0], [40900.0, 2.0], [42500.0, 3.0], [41700.0, 2.0], [43300.0, 2.0], [44900.0, 1.0], [45700.0, 4.0], [48900.0, 1.0], [48100.0, 2.0], [47300.0, 1.0], [52900.0, 5.0], [54500.0, 1.0], [53700.0, 1.0], [55300.0, 1.0], [56900.0, 1.0], [58500.0, 1.0], [63300.0, 1.0], [64900.0, 1.0], [67400.0, 1.0], [72200.0, 1.0], [80200.0, 1.0], [83400.0, 1.0], [96200.0, 1.0], [2200.0, 2.0], [2700.0, 1.0], [3000.0, 1.0], [3700.0, 5.0], [3900.0, 3.0], [4200.0, 4.0], [4300.0, 1.0], [4100.0, 1.0], [66500.0, 1.0], [4400.0, 4.0], [4500.0, 10.0], [4600.0, 1.0], [4700.0, 2.0], [4900.0, 2.0], [5000.0, 1.0], [5100.0, 1.0], [5300.0, 3.0], [5200.0, 1.0], [5400.0, 3.0], [5600.0, 5.0], [5500.0, 2.0], [5800.0, 2.0], [5700.0, 4.0], [5900.0, 2.0], [6000.0, 7.0], [6100.0, 6.0], [6300.0, 4.0], [6200.0, 3.0], [6400.0, 1.0], [6600.0, 2.0], [6700.0, 4.0], [6800.0, 5.0], [6900.0, 3.0], [106500.0, 2.0], [7100.0, 4.0], [7000.0, 4.0], [7200.0, 3.0], [7300.0, 6.0], [7400.0, 6.0], [7500.0, 5.0], [7600.0, 3.0], [7700.0, 6.0], [7800.0, 4.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8200.0, 3.0], [8400.0, 5.0], [8600.0, 4.0], [8800.0, 3.0], [9200.0, 2.0], [9000.0, 5.0], [9600.0, 4.0], [9400.0, 1.0], [9800.0, 4.0], [10000.0, 2.0], [10400.0, 5.0], [10600.0, 5.0], [10800.0, 9.0], [11200.0, 2.0], [11000.0, 1.0], [11400.0, 2.0], [11600.0, 6.0], [12200.0, 2.0], [11800.0, 1.0], [12400.0, 4.0], [12600.0, 1.0], [12800.0, 10.0], [13000.0, 8.0], [13200.0, 1.0], [13400.0, 7.0], [13600.0, 1.0], [14000.0, 6.0], [14200.0, 3.0], [14400.0, 5.0], [14600.0, 5.0], [14800.0, 3.0], [15000.0, 6.0], [15200.0, 10.0], [15400.0, 8.0], [15600.0, 10.0], [15800.0, 2.0], [16000.0, 13.0], [16200.0, 1.0], [17200.0, 9.0], [16400.0, 9.0], [16800.0, 8.0], [17600.0, 10.0], [18000.0, 3.0], [18400.0, 2.0], [18800.0, 3.0], [19200.0, 5.0], [19600.0, 9.0], [20400.0, 4.0], [20000.0, 5.0], [20800.0, 6.0], [21200.0, 3.0], [21600.0, 6.0], [22000.0, 2.0], [22400.0, 3.0], [22800.0, 4.0], [23200.0, 5.0], [23600.0, 3.0], [24400.0, 5.0], [24000.0, 4.0], [25200.0, 2.0], [24800.0, 2.0], [26400.0, 2.0], [26000.0, 2.0], [27600.0, 7.0], [26800.0, 6.0], [27200.0, 3.0], [28400.0, 4.0], [28000.0, 3.0], [29200.0, 3.0], [29600.0, 1.0], [28800.0, 1.0], [30000.0, 2.0], [30400.0, 2.0], [31200.0, 2.0], [31600.0, 1.0], [30800.0, 4.0], [32000.0, 5.0], [32400.0, 2.0], [32800.0, 4.0], [34400.0, 2.0], [33600.0, 2.0], [36800.0, 3.0], [36000.0, 1.0], [37600.0, 1.0], [38400.0, 2.0], [40800.0, 2.0], [42400.0, 2.0], [43200.0, 3.0], [45600.0, 2.0], [46400.0, 1.0], [48000.0, 2.0], [47200.0, 2.0], [52000.0, 2.0], [52800.0, 2.0], [51200.0, 1.0], [53600.0, 2.0], [54400.0, 1.0], [56800.0, 1.0], [59200.0, 2.0], [60800.0, 1.0], [61600.0, 1.0], [67200.0, 1.0], [70400.0, 1.0], [76800.0, 1.0], [80000.0, 1.0], [88000.0, 1.0], [68700.0, 1.0], [84700.0, 1.0], [91100.0, 1.0], [33900.0, 4.0], [36300.0, 1.0], [35500.0, 1.0], [37900.0, 1.0], [38700.0, 3.0], [37100.0, 1.0], [39500.0, 2.0], [40300.0, 2.0], [41900.0, 1.0], [42700.0, 3.0], [41100.0, 3.0], [43500.0, 1.0], [46700.0, 2.0], [45100.0, 1.0], [45900.0, 3.0], [48300.0, 1.0], [50700.0, 3.0], [49900.0, 1.0], [52300.0, 2.0], [51500.0, 1.0], [53100.0, 1.0], [53900.0, 1.0], [54700.0, 3.0], [55500.0, 3.0], [56300.0, 1.0], [61100.0, 1.0], [64300.0, 2.0], [103000.0, 1.0], [66900.0, 1.0], [97300.0, 1.0], [95700.0, 1.0], [102100.0, 1.0], [105300.0, 1.0], [114900.0, 1.0], [16500.0, 1.0], [16900.0, 2.0], [17300.0, 6.0], [17700.0, 10.0], [18100.0, 3.0], [18900.0, 3.0], [19300.0, 4.0], [19700.0, 5.0], [20100.0, 3.0], [20500.0, 5.0], [20900.0, 4.0], [21300.0, 8.0], [22100.0, 2.0], [22500.0, 2.0], [21700.0, 3.0], [22900.0, 6.0], [23300.0, 8.0], [24100.0, 6.0], [24500.0, 3.0], [24900.0, 2.0], [26100.0, 3.0], [25700.0, 3.0], [26500.0, 2.0], [26900.0, 4.0], [27300.0, 1.0], [28100.0, 4.0], [28500.0, 3.0], [27700.0, 2.0], [30100.0, 2.0], [29700.0, 6.0], [30500.0, 1.0], [30900.0, 2.0], [31300.0, 3.0], [31700.0, 8.0], [32100.0, 5.0], [33000.0, 1.0], [33800.0, 2.0], [36200.0, 2.0], [37800.0, 2.0], [37000.0, 1.0], [38600.0, 1.0], [40200.0, 4.0], [41000.0, 1.0], [42600.0, 4.0], [41800.0, 2.0], [44200.0, 1.0], [45000.0, 2.0], [43400.0, 1.0], [45800.0, 4.0], [46600.0, 4.0], [48200.0, 1.0], [49000.0, 1.0], [49800.0, 1.0], [50600.0, 1.0], [53000.0, 5.0], [53800.0, 1.0], [54600.0, 2.0], [55400.0, 1.0], [60200.0, 2.0], [63400.0, 1.0], [65000.0, 1.0], [66000.0, 1.0], [72400.0, 1.0], [96400.0, 1.0], [102800.0, 1.0], [104400.0, 1.0], [112400.0, 1.0], [69100.0, 1.0], [83500.0, 1.0], [93100.0, 1.0], [105900.0, 1.0], [33300.0, 1.0], [34100.0, 1.0], [35700.0, 1.0], [36500.0, 1.0], [34900.0, 1.0], [38900.0, 4.0], [37300.0, 3.0], [38100.0, 2.0], [40500.0, 3.0], [39700.0, 1.0], [41300.0, 1.0], [42100.0, 3.0], [43700.0, 3.0], [44500.0, 1.0], [46900.0, 3.0], [45300.0, 2.0], [46100.0, 1.0], [47700.0, 1.0], [48500.0, 2.0], [49300.0, 2.0], [50100.0, 1.0], [50900.0, 1.0], [52500.0, 1.0], [51700.0, 4.0], [53300.0, 1.0], [54100.0, 2.0], [55700.0, 2.0], [56500.0, 1.0], [57300.0, 2.0], [60500.0, 1.0], [65300.0, 1.0], [68200.0, 1.0], [81000.0, 1.0], [89000.0, 1.0], [97000.0, 1.0], [108200.0, 2.0], [70500.0, 1.0], [72100.0, 1.0], [92900.0, 1.0], [100900.0, 1.0], [112100.0, 1.0], [8300.0, 5.0], [8500.0, 3.0], [9100.0, 6.0], [8900.0, 2.0], [9500.0, 3.0], [9700.0, 3.0], [9300.0, 1.0], [9900.0, 3.0], [10100.0, 5.0], [10300.0, 5.0], [10700.0, 6.0], [10500.0, 2.0], [10900.0, 5.0], [11100.0, 3.0], [11300.0, 5.0], [11500.0, 1.0], [11700.0, 2.0], [11900.0, 5.0], [12100.0, 3.0], [12300.0, 5.0], [12700.0, 2.0], [13300.0, 2.0], [12900.0, 12.0], [13100.0, 6.0], [13500.0, 3.0], [13700.0, 2.0], [13900.0, 3.0], [14300.0, 9.0], [14100.0, 6.0], [14500.0, 4.0], [14700.0, 5.0], [14900.0, 8.0], [15300.0, 12.0], [15100.0, 3.0], [15500.0, 10.0], [15700.0, 16.0], [15900.0, 9.0], [16100.0, 4.0], [16300.0, 2.0], [16600.0, 8.0], [17000.0, 2.0], [17400.0, 1.0], [17800.0, 8.0], [18200.0, 2.0], [18600.0, 4.0], [19400.0, 3.0], [20200.0, 3.0], [19800.0, 7.0], [20600.0, 6.0], [21400.0, 7.0], [21000.0, 1.0], [21800.0, 3.0], [22200.0, 2.0], [22600.0, 5.0], [23400.0, 4.0], [23000.0, 2.0], [23800.0, 3.0], [24200.0, 1.0], [24600.0, 3.0], [25400.0, 1.0], [25000.0, 7.0], [26600.0, 4.0], [25800.0, 4.0], [26200.0, 1.0], [27000.0, 5.0], [27400.0, 3.0], [27800.0, 1.0], [28600.0, 6.0], [28200.0, 2.0], [29400.0, 2.0], [29800.0, 4.0], [30600.0, 2.0], [31400.0, 3.0], [31000.0, 5.0], [32200.0, 4.0], [32600.0, 4.0], [31800.0, 2.0], [33200.0, 2.0], [34000.0, 2.0], [34800.0, 2.0], [35600.0, 4.0], [38000.0, 2.0], [37200.0, 1.0], [38800.0, 1.0], [40400.0, 4.0], [42000.0, 7.0], [41200.0, 1.0], [44400.0, 1.0], [43600.0, 1.0], [45200.0, 3.0], [47600.0, 1.0], [49200.0, 2.0], [50800.0, 2.0], [50000.0, 1.0], [53200.0, 2.0], [52400.0, 2.0], [51600.0, 2.0], [54000.0, 1.0], [54800.0, 2.0], [55600.0, 1.0], [57200.0, 1.0], [58800.0, 2.0], [59600.0, 1.0], [76000.0, 1.0], [80800.0, 1.0], [106400.0, 1.0], [33500.0, 1.0], [36700.0, 1.0], [37500.0, 1.0], [38300.0, 2.0], [39900.0, 5.0], [40700.0, 2.0], [42300.0, 2.0], [43100.0, 2.0], [44700.0, 2.0], [43900.0, 3.0], [45500.0, 2.0], [47100.0, 1.0], [48700.0, 3.0], [47900.0, 3.0], [51100.0, 1.0], [52700.0, 1.0], [53500.0, 5.0], [54300.0, 1.0], [55100.0, 1.0], [60700.0, 1.0], [65500.0, 1.0], [79800.0, 1.0], [107000.0, 1.0], [88500.0, 1.0], [17100.0, 2.0], [17900.0, 1.0], [18300.0, 1.0], [17500.0, 4.0], [18700.0, 5.0], [19100.0, 3.0], [20300.0, 2.0], [19500.0, 4.0], [19900.0, 5.0], [21100.0, 5.0], [21500.0, 12.0], [20700.0, 2.0], [21900.0, 9.0], [22300.0, 1.0], [22700.0, 7.0], [23500.0, 6.0], [23900.0, 3.0], [25500.0, 3.0], [24700.0, 3.0], [25100.0, 3.0], [26300.0, 6.0], [25900.0, 3.0], [26700.0, 3.0], [27100.0, 2.0], [27900.0, 4.0], [28300.0, 2.0], [29500.0, 2.0], [29100.0, 2.0], [29900.0, 4.0], [30700.0, 5.0], [30300.0, 1.0], [31100.0, 6.0], [31500.0, 2.0], [31900.0, 4.0], [32700.0, 1.0], [32300.0, 1.0], [34200.0, 4.0], [33400.0, 1.0], [35800.0, 1.0], [35000.0, 1.0], [38200.0, 1.0], [40600.0, 4.0], [39000.0, 2.0], [41400.0, 2.0], [42200.0, 1.0], [43000.0, 2.0], [43800.0, 2.0], [44600.0, 1.0], [45400.0, 1.0], [47000.0, 1.0], [48600.0, 3.0], [47800.0, 7.0], [50200.0, 1.0], [51000.0, 2.0], [51800.0, 2.0], [52600.0, 2.0], [55000.0, 1.0], [54200.0, 1.0], [60600.0, 1.0], [68400.0, 1.0], [70000.0, 1.0], [73200.0, 1.0], [89200.0, 1.0], [94000.0, 1.0], [95600.0, 1.0], [105200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 114900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 739.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 761.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 761.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 739.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.63725522E12, "maxY": 354.6744186046513, "series": [{"data": [[1.63725522E12, 264.20206185567], [1.63725528E12, 9.0]], "isOverall": false, "label": "Group - cadastro de usuarios", "isController": false}, {"data": [[1.63725522E12, 337.1540785498489], [1.63725528E12, 87.23076923076917]], "isOverall": false, "label": "Group - produtos", "isController": false}, {"data": [[1.63725522E12, 354.6744186046513], [1.63725534E12, 12.541666666666666], [1.63725528E12, 113.21714285714289]], "isOverall": false, "label": "Group - usuarios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725534E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3840.0, "minX": 1.0, "maxY": 112432.0, "series": [{"data": [[2.0, 112193.0], [3.0, 112432.0], [4.0, 108289.0], [5.0, 108201.0], [6.0, 106572.0], [7.0, 106470.0], [8.0, 105280.0], [10.0, 110134.0], [11.0, 102138.0], [12.0, 107072.0], [13.0, 104470.0], [14.0, 102884.0], [15.0, 103049.0], [16.0, 100902.0], [17.0, 97063.0], [18.0, 95733.0], [19.0, 105908.0], [20.0, 95524.0], [21.0, 95630.0], [22.0, 97355.0], [23.0, 96217.0], [24.0, 92977.0], [25.0, 93143.0], [26.0, 96401.0], [27.0, 88579.0], [28.0, 88015.0], [29.0, 94011.0], [31.0, 89031.0], [33.0, 89206.0], [32.0, 91133.0], [35.0, 83427.0], [34.0, 84315.0], [37.0, 84779.0], [36.0, 70458.0], [39.0, 80822.0], [38.0, 83540.0], [41.0, 76811.0], [40.0, 80091.0], [43.0, 81045.0], [45.0, 84385.0], [44.0, 76042.0], [47.0, 72221.0], [46.0, 79806.0], [49.0, 72483.0], [48.0, 76213.5], [51.0, 68377.0], [50.0, 69127.0], [53.0, 70075.0], [52.0, 71587.0], [55.0, 67417.0], [54.0, 68322.0], [57.0, 69877.5], [56.0, 65395.0], [59.0, 66933.0], [58.0, 57363.0], [61.0, 64353.0], [60.0, 64933.0], [63.0, 63361.0], [62.0, 68422.0], [66.0, 71533.0], [65.0, 61151.0], [64.0, 60706.0], [71.0, 65507.0], [70.0, 61641.0], [68.0, 70514.0], [75.0, 67227.0], [74.0, 60250.0], [73.0, 60214.0], [72.0, 60877.0], [79.0, 57239.0], [78.0, 58887.0], [76.0, 59650.0], [83.0, 56952.0], [82.0, 54837.0], [81.0, 68283.0], [80.0, 68793.0], [87.0, 55569.0], [86.0, 66011.0], [85.0, 59270.0], [84.0, 57335.0], [90.0, 54221.0], [89.0, 53693.0], [88.0, 55539.0], [95.0, 65061.0], [93.0, 56343.0], [92.0, 60545.0], [99.0, 54026.0], [98.0, 55601.5], [97.0, 46903.0], [96.0, 54854.0], [103.0, 57188.0], [102.0, 64350.0], [101.0, 63414.0], [107.0, 54415.0], [106.0, 54646.0], [105.0, 54139.0], [104.0, 55459.0], [111.0, 51074.0], [110.0, 54790.0], [109.0, 47961.0], [108.0, 60647.0], [115.0, 54760.0], [114.0, 53507.0], [113.0, 56807.0], [112.0, 54375.0], [119.0, 53191.0], [118.0, 53579.0], [117.0, 53554.0], [116.0, 54732.0], [123.0, 49946.0], [122.0, 55384.0], [121.0, 53986.0], [120.0, 54126.0], [127.0, 54568.0], [126.0, 52409.0], [125.0, 48313.0], [124.0, 53725.0], [135.0, 52629.0], [134.0, 52866.0], [133.0, 52913.0], [132.0, 51719.0], [131.0, 51664.0], [130.0, 51746.0], [129.0, 52330.0], [128.0, 52937.0], [143.0, 53001.0], [142.0, 53010.0], [141.0, 50779.0], [140.0, 50435.5], [139.0, 53831.0], [138.0, 54734.5], [137.0, 56564.0], [136.0, 52900.0], [151.0, 50270.5], [150.0, 50770.0], [149.0, 51730.0], [148.0, 39993.0], [147.0, 53057.0], [146.0, 48153.0], [145.0, 52949.0], [144.0, 53085.0], [159.0, 47093.0], [158.0, 51248.0], [157.0, 48702.0], [155.0, 51711.0], [154.0, 52059.0], [153.0, 50153.0], [152.0, 50876.0], [167.0, 52946.0], [166.0, 52650.0], [165.0, 44730.0], [164.0, 53213.0], [163.0, 50096.0], [162.0, 53601.0], [160.0, 52581.0], [175.0, 51066.0], [174.0, 51892.0], [173.0, 52715.0], [172.0, 50709.0], [171.0, 51819.0], [170.0, 50840.0], [169.0, 50646.0], [168.0, 51185.0], [183.0, 55029.0], [182.0, 46688.0], [181.0, 51628.0], [180.0, 49087.0], [179.0, 51599.0], [178.0, 58863.0], [177.0, 52809.0], [176.0, 46643.0], [191.0, 49360.0], [190.0, 47879.0], [189.0, 49216.0], [188.0, 48270.0], [187.0, 47122.0], [186.0, 47307.0], [185.0, 52493.0], [184.0, 55600.0], [199.0, 48638.0], [198.0, 48749.0], [197.0, 47819.0], [196.0, 48597.0], [195.0, 47887.0], [194.0, 47974.0], [193.0, 47871.0], [192.0, 55743.0], [207.0, 43766.0], [206.0, 48650.0], [205.0, 46488.0], [204.0, 52057.0], [203.0, 50291.0], [202.0, 43876.0], [201.0, 46686.0], [200.0, 45913.0], [215.0, 41830.0], [214.0, 47898.0], [213.0, 47854.0], [212.0, 45231.0], [211.0, 52394.0], [210.0, 47934.0], [209.0, 47694.0], [208.0, 53249.0], [223.0, 40976.0], [222.0, 45647.0], [221.0, 53333.0], [219.0, 45242.0], [218.0, 45238.0], [217.0, 53554.0], [216.0, 45797.0], [231.0, 48628.0], [229.0, 45875.0], [228.0, 45813.0], [227.0, 49557.5], [225.0, 45506.0], [224.0, 49268.0], [239.0, 40457.0], [238.0, 49355.0], [237.0, 42674.0], [236.0, 43486.0], [235.0, 44637.0], [233.0, 38284.0], [232.0, 45986.0], [247.0, 45765.0], [246.0, 42387.0], [245.0, 42129.0], [244.0, 41259.0], [243.0, 40441.0], [242.0, 42095.0], [241.0, 45341.0], [240.0, 43002.0], [255.0, 43261.0], [254.0, 42345.0], [253.0, 44591.0], [252.0, 38320.0], [251.0, 38868.0], [250.0, 42412.0], [249.0, 42403.0], [248.0, 38343.0], [270.0, 43734.0], [271.0, 42057.0], [269.0, 42529.0], [268.0, 42064.0], [267.0, 41146.0], [266.0, 43278.0], [265.0, 43275.0], [264.0, 42169.0], [263.0, 43803.0], [257.0, 48586.0], [256.0, 29778.0], [259.0, 48197.0], [258.0, 44936.0], [262.0, 43305.0], [261.0, 43376.0], [260.0, 42198.0], [286.0, 45091.0], [287.0, 49825.0], [285.0, 43714.5], [284.0, 39964.0], [283.0, 45708.0], [282.0, 46145.0], [281.0, 46604.0], [280.0, 48010.0], [279.0, 46719.0], [273.0, 42726.0], [272.0, 42035.0], [275.0, 42631.0], [274.0, 42633.0], [278.0, 42717.0], [277.0, 42048.0], [276.0, 42031.0], [302.0, 40205.0], [303.0, 40854.0], [301.0, 41159.0], [300.0, 43917.0], [299.0, 41185.0], [298.0, 45217.0], [297.0, 46970.0], [296.0, 40302.0], [295.0, 47295.0], [289.0, 39052.0], [288.0, 43961.0], [291.0, 43135.0], [290.0, 48950.0], [294.0, 38957.0], [293.0, 45872.0], [292.0, 43968.0], [318.0, 42690.0], [319.0, 40780.0], [317.0, 40478.0], [316.0, 40528.0], [315.0, 40649.0], [314.0, 42721.0], [313.0, 45169.0], [312.0, 40273.0], [311.0, 45997.0], [305.0, 37727.0], [304.0, 41477.0], [307.0, 38489.0], [306.0, 40274.0], [310.0, 38569.0], [309.0, 40219.0], [308.0, 41800.0], [334.0, 46964.0], [335.0, 48709.0], [333.0, 41362.0], [323.0, 31850.0], [322.0, 38492.0], [321.0, 38104.0], [331.0, 41769.0], [330.0, 37287.0], [329.0, 45376.0], [328.0, 47208.0], [326.0, 41005.0], [325.0, 31488.0], [324.0, 38766.0], [350.0, 45589.0], [351.0, 38794.0], [349.0, 34810.0], [348.0, 36114.0], [347.0, 36867.0], [346.0, 39928.0], [345.0, 43471.5], [344.0, 42540.0], [343.0, 37800.0], [337.0, 37676.0], [336.0, 40688.0], [339.0, 44272.0], [338.0, 40647.0], [342.0, 47708.0], [341.0, 41703.0], [340.0, 48031.0], [366.0, 32470.0], [367.0, 40478.0], [365.0, 36281.0], [364.0, 37303.0], [363.0, 37089.0], [362.0, 35087.0], [361.0, 33890.0], [360.0, 31758.0], [359.0, 45723.0], [353.0, 38198.0], [352.0, 32386.0], [355.0, 29786.0], [354.0, 42049.0], [358.0, 33217.0], [357.0, 34962.0], [356.0, 38613.0], [381.0, 43138.0], [383.0, 43539.0], [380.0, 36546.0], [371.0, 40361.0], [370.0, 44491.0], [369.0, 34008.0], [368.0, 34835.0], [379.0, 39728.0], [378.0, 43092.0], [377.0, 31027.0], [375.0, 36898.0], [374.0, 39914.0], [372.0, 37148.0], [398.0, 30721.0], [399.0, 41980.0], [397.0, 35643.0], [396.0, 39553.0], [395.0, 39084.0], [394.0, 38032.0], [393.0, 32057.0], [392.0, 33403.0], [391.0, 35630.0], [385.0, 33645.0], [384.0, 35649.0], [387.0, 37382.0], [386.0, 42285.0], [390.0, 32691.0], [389.0, 32693.0], [388.0, 38999.0], [414.0, 37370.0], [415.0, 35790.0], [413.0, 32028.0], [412.0, 31515.0], [411.0, 28555.0], [410.0, 36316.0], [409.0, 31879.0], [408.0, 37784.0], [407.0, 34536.0], [400.0, 31158.0], [402.0, 35538.0], [401.0, 42545.0], [406.0, 37734.0], [405.0, 41468.0], [404.0, 31074.0], [430.0, 31791.0], [431.0, 29779.0], [429.0, 34250.0], [428.0, 31781.0], [427.0, 30333.0], [426.0, 31381.0], [425.0, 36003.0], [424.0, 32688.0], [423.0, 33681.0], [417.0, 35817.0], [416.0, 32282.0], [419.0, 40531.0], [418.0, 40537.0], [422.0, 32774.0], [421.0, 30473.0], [420.0, 30814.0], [446.0, 29838.0], [447.0, 30941.0], [445.0, 30516.0], [444.0, 33989.0], [443.0, 33773.0], [442.0, 38948.0], [441.0, 31938.0], [440.0, 37834.0], [439.0, 34438.0], [433.0, 28655.0], [432.0, 29886.0], [435.0, 40652.0], [434.0, 35606.0], [438.0, 36881.0], [437.0, 40743.0], [436.0, 32811.0], [462.0, 30850.0], [463.0, 27252.0], [461.0, 31789.0], [460.0, 31786.0], [459.0, 39583.0], [458.0, 38997.0], [457.0, 39904.0], [456.0, 32220.0], [455.0, 28448.0], [449.0, 33893.5], [448.0, 31083.0], [451.0, 38748.0], [450.0, 31952.0], [454.0, 31747.0], [453.0, 33892.0], [452.0, 31749.0], [478.0, 26695.0], [479.0, 28421.0], [477.0, 24424.0], [476.0, 33024.0], [475.0, 33934.0], [474.0, 30711.0], [473.0, 33914.0], [472.0, 32168.0], [471.0, 20650.0], [465.0, 27774.0], [464.0, 31723.0], [467.0, 32020.0], [466.0, 36718.0], [470.0, 34246.0], [469.0, 32121.0], [494.0, 28620.0], [495.0, 34230.0], [493.0, 32648.0], [492.0, 37998.0], [491.0, 33959.0], [489.0, 31334.0], [488.0, 32837.0], [487.0, 28311.5], [481.0, 32759.5], [480.0, 27996.0], [483.0, 37687.0], [482.0, 32089.0], [486.0, 38087.0], [485.0, 30840.0], [484.0, 33743.0], [510.0, 29782.0], [511.0, 31679.0], [509.0, 27427.0], [508.0, 36902.0], [507.0, 37513.0], [506.0, 28563.0], [505.0, 29979.0], [504.0, 30602.0], [503.0, 27777.0], [497.0, 30664.0], [496.0, 34280.0], [499.0, 30102.0], [498.0, 24429.0], [502.0, 31098.0], [501.0, 30864.0], [500.0, 34062.0], [538.0, 29803.0], [542.0, 24986.0], [543.0, 25053.0], [529.0, 29763.0], [528.0, 34513.0], [531.0, 28827.0], [530.0, 29770.0], [533.0, 31299.0], [532.0, 26854.0], [541.0, 29890.0], [540.0, 25582.5], [539.0, 28014.0], [536.0, 33314.0], [519.0, 31243.0], [518.0, 25179.0], [517.0, 29464.0], [516.0, 31197.0], [515.0, 36225.0], [514.0, 31056.0], [513.0, 26311.0], [512.0, 23882.0], [527.0, 30714.0], [526.0, 24642.0], [525.0, 28630.0], [524.0, 34594.0], [523.0, 34412.0], [522.0, 22906.0], [521.0, 24119.0], [520.0, 27985.0], [535.0, 34172.0], [534.0, 31159.0], [569.0, 26611.0], [573.0, 27036.0], [574.0, 28643.0], [561.0, 26524.0], [560.0, 32811.0], [563.0, 28119.0], [562.0, 28062.0], [565.0, 25070.0], [564.0, 24968.0], [572.0, 32077.0], [571.0, 28450.0], [570.0, 32148.0], [568.0, 32295.0], [551.0, 33216.0], [550.0, 29528.0], [549.0, 24824.0], [548.0, 28076.0], [547.0, 27927.0], [546.0, 25056.0], [545.0, 32144.0], [544.0, 25141.0], [559.0, 32910.0], [558.0, 32815.0], [557.0, 25289.0], [556.0, 26924.0], [555.0, 26986.0], [554.0, 28528.0], [553.0, 24798.0], [552.0, 29642.0], [567.0, 31488.0], [566.0, 28372.0], [601.0, 24823.0], [606.0, 26782.0], [607.0, 26133.0], [593.0, 32213.0], [592.0, 26222.0], [595.0, 21395.0], [594.0, 24706.0], [597.0, 31511.0], [596.0, 32193.0], [604.0, 26695.0], [603.0, 26007.0], [602.0, 26483.0], [600.0, 25932.0], [583.0, 26819.0], [581.0, 31918.0], [580.0, 25014.0], [579.0, 28147.0], [578.0, 25010.0], [577.0, 28166.0], [576.0, 26560.0], [590.0, 24567.0], [589.0, 24530.0], [588.0, 24433.0], [587.0, 24423.0], [586.0, 28398.0], [585.0, 28254.0], [584.0, 29104.0], [599.0, 20821.0], [598.0, 23602.0], [636.0, 26045.0], [639.0, 26324.0], [624.0, 18060.0], [626.0, 20013.0], [625.0, 25782.0], [628.0, 21726.0], [627.0, 24109.0], [638.0, 23853.0], [637.0, 27204.0], [635.0, 30998.0], [634.0, 27434.0], [633.0, 23914.0], [632.0, 29166.0], [623.0, 23936.0], [608.0, 22480.0], [610.0, 26372.0], [609.0, 28267.0], [612.0, 25828.0], [611.0, 26450.0], [615.0, 31473.0], [613.0, 28109.0], [622.0, 31313.0], [621.0, 24037.0], [620.0, 27058.0], [619.0, 26762.0], [618.0, 23528.0], [617.0, 31180.0], [616.0, 25216.0], [631.0, 29214.0], [630.0, 26569.0], [668.0, 23519.0], [671.0, 29962.0], [657.0, 29239.0], [656.0, 25890.0], [659.0, 20610.0], [658.0, 20622.0], [661.0, 30045.0], [660.0, 22707.0], [670.0, 23347.0], [669.0, 23390.0], [667.0, 25953.0], [666.0, 22949.0], [665.0, 23201.0], [664.0, 30461.0], [655.0, 27065.0], [640.0, 31172.0], [642.0, 22758.0], [641.0, 25026.5], [644.0, 20627.0], [643.0, 31145.0], [647.0, 27957.0], [646.0, 20981.0], [654.0, 24173.0], [652.0, 26883.0], [651.0, 23921.0], [650.0, 29903.0], [649.0, 30775.0], [648.0, 27614.0], [663.0, 25934.0], [662.0, 25859.0], [700.0, 22838.0], [703.0, 26862.0], [689.0, 24732.0], [688.0, 29549.0], [691.0, 27467.0], [690.0, 23079.0], [693.0, 22869.0], [692.0, 21044.0], [702.0, 19945.0], [701.0, 21103.0], [699.0, 26928.0], [698.0, 23247.0], [697.0, 19888.0], [696.0, 28672.0], [687.0, 29226.0], [672.0, 24254.0], [674.0, 24055.0], [673.0, 30167.0], [676.0, 23289.0], [675.0, 23442.0], [679.0, 17718.0], [678.0, 30015.0], [686.0, 24052.0], [684.0, 25168.0], [683.0, 29941.0], [682.0, 21514.0], [681.0, 21625.0], [680.0, 29425.0], [695.0, 17127.0], [694.0, 20672.0], [732.0, 20079.0], [735.0, 20557.0], [721.0, 27636.0], [720.0, 27112.0], [723.0, 19938.0], [722.0, 20356.0], [725.0, 25538.0], [724.0, 21864.0], [734.0, 11183.0], [733.0, 20078.0], [731.0, 26200.5], [730.0, 27643.0], [729.0, 19954.0], [728.0, 20171.0], [719.0, 21900.0], [706.0, 22991.0], [704.0, 27865.0], [709.0, 17673.0], [707.0, 26444.0], [711.0, 21468.0], [710.0, 19893.0], [718.0, 27688.0], [717.0, 23249.0], [716.0, 27196.0], [715.0, 23343.0], [714.0, 21520.0], [713.0, 21530.0], [712.0, 21551.0], [727.0, 19908.0], [726.0, 26823.0], [761.0, 21318.0], [766.0, 22635.0], [767.0, 21224.0], [752.0, 20868.5], [754.0, 25529.0], [753.0, 19711.0], [756.0, 19616.0], [755.0, 20427.0], [765.0, 27067.0], [763.0, 21350.0], [762.0, 21339.0], [760.0, 21269.0], [742.0, 24029.0], [741.0, 21770.0], [740.0, 23349.0], [739.0, 22306.0], [738.0, 27614.0], [737.0, 27600.0], [750.0, 19484.0], [749.0, 22625.0], [748.0, 22790.0], [747.0, 19676.0], [746.0, 19604.0], [745.0, 27602.0], [759.0, 22748.0], [757.0, 22644.0], [796.0, 26361.0], [799.0, 25058.0], [785.0, 25783.0], [787.0, 20928.0], [786.0, 15355.0], [789.0, 21492.0], [788.0, 19338.0], [798.0, 21517.0], [797.0, 26168.0], [795.0, 20955.0], [794.0, 21923.0], [793.0, 23346.0], [792.0, 21511.0], [783.0, 22545.0], [769.0, 27017.0], [768.0, 18975.0], [771.0, 26184.0], [770.0, 21112.0], [773.0, 21372.0], [772.0, 21126.0], [775.0, 20136.0], [774.0, 26923.0], [782.0, 22535.0], [781.0, 23030.0], [780.0, 22999.5], [779.0, 21729.0], [778.0, 19541.0], [777.0, 19547.0], [776.0, 19615.0], [791.0, 26792.0], [790.0, 26363.0], [826.0, 24658.0], [830.0, 23321.0], [831.0, 19298.0], [817.0, 18222.0], [816.0, 16407.0], [819.0, 21581.0], [818.0, 19869.0], [821.0, 20838.0], [820.0, 18702.5], [829.0, 21464.0], [828.0, 23675.0], [827.0, 19833.0], [824.0, 23539.0], [807.0, 19396.0], [806.0, 20817.0], [805.0, 18624.0], [804.0, 25499.0], [803.0, 21247.0], [802.0, 26618.0], [801.0, 21579.0], [800.0, 22479.0], [815.0, 18085.0], [814.0, 19811.0], [813.0, 21330.0], [812.0, 23308.0], [811.0, 21513.0], [810.0, 17504.0], [809.0, 21149.0], [808.0, 13453.0], [823.0, 22901.0], [822.0, 23557.0], [860.0, 18099.0], [863.0, 20274.0], [848.0, 15411.0], [850.0, 15414.0], [849.0, 16126.0], [852.0, 23433.0], [851.0, 15311.0], [862.0, 21302.0], [861.0, 17832.0], [859.0, 23623.0], [858.0, 19268.0], [857.0, 23273.0], [856.0, 22949.0], [846.0, 14687.0], [833.0, 24515.0], [832.0, 15349.0], [835.0, 17237.0], [834.0, 24622.0], [837.0, 23407.0], [836.0, 17623.5], [839.0, 24109.0], [838.0, 24411.0], [845.0, 17269.0], [844.0, 17229.0], [843.0, 17305.0], [842.0, 24178.0], [855.0, 15255.0], [853.0, 23810.0], [892.0, 16543.0], [895.0, 16464.0], [881.0, 11966.0], [880.0, 19183.0], [883.0, 17804.0], [882.0, 19307.0], [885.0, 17803.0], [884.0, 17840.0], [894.0, 14713.0], [893.0, 14555.0], [891.0, 16067.0], [890.0, 16078.0], [889.0, 21602.0], [888.0, 22882.0], [878.0, 18406.0], [865.0, 18112.0], [864.0, 18347.5], [867.0, 16867.0], [866.0, 23569.0], [869.0, 18721.0], [868.0, 19638.0], [871.0, 20206.0], [870.0, 15361.0], [877.0, 23143.0], [876.0, 22642.0], [875.0, 18698.0], [874.0, 15253.0], [873.0, 17081.0], [872.0, 23537.0], [887.0, 22873.0], [886.0, 16067.0], [924.0, 17170.0], [927.0, 21981.0], [913.0, 17604.0], [912.0, 17704.0], [915.0, 17801.0], [914.0, 22468.0], [917.0, 21220.0], [916.0, 22042.0], [926.0, 17237.0], [925.0, 20760.0], [923.0, 21972.0], [922.0, 15717.0], [921.0, 15708.0], [920.0, 21938.0], [911.0, 22171.0], [897.0, 14768.0], [896.0, 14623.0], [900.0, 16454.0], [898.0, 19343.0], [903.0, 22197.0], [901.0, 22788.0], [910.0, 19188.0], [909.0, 18289.0], [908.0, 22047.0], [907.0, 22250.0], [906.0, 21926.0], [905.0, 16439.0], [904.0, 22780.0], [919.0, 21509.0], [918.0, 14094.0], [956.0, 14101.0], [959.0, 15331.0], [944.0, 17395.0], [947.0, 15781.0], [945.0, 16020.0], [949.0, 19767.0], [948.0, 17638.0], [958.0, 16052.0], [957.0, 16052.0], [955.0, 20107.0], [954.0, 17605.0], [953.0, 21867.0], [952.0, 19593.0], [943.0, 21913.0], [929.0, 15649.0], [928.0, 15579.0], [931.0, 17272.0], [930.0, 20778.0], [933.0, 17335.0], [932.0, 15789.0], [935.0, 16056.0], [934.0, 14363.0], [942.0, 21915.0], [941.0, 15548.0], [940.0, 17515.0], [939.0, 15929.0], [938.0, 14397.0], [937.0, 21698.0], [936.0, 17278.0], [951.0, 19835.0], [950.0, 16013.0], [988.0, 17737.0], [991.0, 14194.0], [976.0, 14131.0], [978.0, 18136.0], [977.0, 15656.0], [981.0, 21226.333333333332], [979.0, 21682.0], [990.0, 21437.0], [989.0, 15497.0], [987.0, 17742.0], [986.0, 17747.0], [985.0, 14200.0], [984.0, 21529.0], [975.0, 17886.0], [961.0, 17200.0], [963.0, 17310.0], [962.0, 20288.0], [965.0, 21810.0], [964.0, 17643.0], [967.0, 21458.0], [966.0, 17375.0], [974.0, 14561.0], [973.0, 14264.0], [972.0, 17802.0], [971.0, 14033.0], [970.0, 17676.0], [969.0, 16351.0], [968.0, 16353.0], [983.0, 12685.0], [982.0, 17330.0], [1018.0, 13900.0], [1022.0, 15762.0], [1023.0, 15779.0], [1009.0, 15681.0], [1008.0, 15314.0], [1011.0, 15366.0], [1010.0, 16652.0], [1013.0, 20914.0], [1012.0, 20895.0], [1021.0, 17253.0], [1020.0, 15748.0], [1019.0, 20608.0], [1017.0, 20410.0], [999.0, 17414.0], [998.0, 14118.0], [997.0, 14059.0], [996.0, 13188.0], [995.0, 21406.0], [994.0, 12364.0], [993.0, 16993.0], [992.0, 21374.0], [1006.0, 18454.0], [1004.0, 17676.0], [1003.0, 20094.0], [1002.0, 14360.0], [1001.0, 14231.0], [1000.0, 14148.0], [1015.0, 20884.0], [1014.0, 15573.0], [1080.0, 14378.0], [1076.0, 19135.0], [1084.0, 14365.0], [1056.0, 9694.0], [1058.0, 12771.0], [1060.0, 18924.0], [1062.0, 10734.0], [1064.0, 13049.0], [1066.0, 10877.0], [1068.0, 18723.0], [1070.0, 10715.0], [1086.0, 10716.0], [1082.0, 18895.0], [1078.0, 15565.0], [1074.0, 13412.0], [1072.0, 15875.0], [1024.0, 15306.0], [1026.0, 20062.0], [1028.0, 15281.0], [1030.0, 20546.0], [1032.0, 13664.0], [1034.0, 20343.0], [1036.0, 13500.0], [1038.0, 12948.0], [1054.0, 19437.0], [1052.0, 16997.0], [1050.0, 14944.0], [1048.0, 13403.0], [1046.0, 19665.0], [1044.0, 19763.0], [1042.0, 18755.0], [1040.0, 18788.0], [1118.0, 11918.0], [1108.0, 9874.0], [1106.0, 18750.0], [1104.0, 13416.0], [1110.0, 17795.0], [1112.0, 17631.0], [1114.0, 13034.0], [1116.0, 9891.0], [1136.0, 11422.0], [1102.0, 17905.0], [1100.0, 14373.0], [1098.0, 14365.0], [1096.0, 12841.0], [1094.0, 14044.0], [1092.0, 14126.0], [1090.0, 18694.0], [1088.0, 18874.0], [1138.0, 12973.0], [1140.0, 11659.0], [1142.0, 16142.0], [1144.0, 15548.0], [1134.0, 9873.5], [1132.0, 12921.0], [1130.0, 16692.0], [1128.0, 16889.0], [1126.0, 17056.0], [1124.0, 13499.0], [1122.0, 13486.0], [1120.0, 13448.0], [1150.0, 9086.0], [1148.0, 9303.5], [1146.0, 16868.0], [1156.0, 16190.0], [1182.0, 15134.0], [1152.0, 16823.0], [1154.0, 16810.0], [1180.0, 9134.0], [1178.0, 16469.0], [1176.0, 15610.0], [1174.0, 15871.5], [1172.0, 12331.0], [1170.0, 12903.0], [1168.0, 14258.0], [1200.0, 15219.0], [1166.0, 16425.0], [1164.0, 16616.0], [1162.0, 15366.0], [1160.0, 15221.0], [1158.0, 16631.0], [1202.0, 15045.0], [1204.0, 12737.0], [1206.0, 12417.0], [1208.0, 10552.0], [1188.0, 8114.0], [1184.0, 11343.0], [1190.0, 12915.0], [1192.0, 12918.0], [1194.0, 16031.0], [1196.0, 10397.0], [1198.0, 12874.0], [1214.0, 15649.0], [1212.0, 15622.0], [1210.0, 14806.0], [1224.0, 15971.0], [1268.0, 7432.0], [1276.0, 14635.0], [1226.0, 9660.0], [1222.0, 14933.0], [1220.0, 15777.0], [1218.0, 14955.0], [1216.0, 12230.5], [1228.0, 15713.0], [1230.0, 15704.0], [1246.0, 15701.0], [1244.0, 15030.0], [1242.0, 13849.5], [1240.0, 15771.0], [1238.0, 15782.0], [1236.0, 15798.0], [1232.0, 13120.0], [1264.0, 15188.0], [1266.0, 15417.0], [1270.0, 14809.0], [1248.0, 15038.0], [1250.0, 9061.0], [1252.0, 9195.0], [1254.0, 10797.0], [1256.0, 14750.0], [1258.0, 14720.0], [1260.0, 11690.0], [1262.0, 15448.0], [1278.0, 11012.0], [1274.0, 14761.0], [1272.0, 10490.0], [1286.0, 7071.0], [1292.0, 5689.5], [1304.0, 9042.0], [1302.0, 8375.0], [1300.0, 13761.0], [1296.0, 8639.0], [1306.0, 9661.0], [1308.0, 13032.0], [1280.0, 7022.0], [1282.0, 10043.0], [1284.0, 10103.0], [1288.0, 14060.0], [1290.0, 10092.0], [1310.0, 9382.0], [1342.0, 6411.0], [1312.0, 9665.0], [1316.0, 7789.0], [1314.0, 12387.0], [1318.0, 12367.0], [1322.0, 4555.0], [1324.0, 12207.0], [1340.0, 11285.0], [1338.0, 6341.0], [1336.0, 10340.0], [1332.0, 7753.0], [1330.0, 9708.0], [1328.0, 11368.0], [1294.0, 6935.0], [1350.0, 10889.0], [1402.0, 8386.0], [1394.0, 7012.5], [1344.0, 11413.0], [1346.0, 7308.0], [1348.0, 6330.0], [1352.0, 8029.0], [1354.0, 10935.0], [1356.0, 10306.0], [1392.0, 9133.0], [1364.0, 6376.8], [1362.0, 10880.0], [1360.0, 10750.0], [1366.0, 10350.0], [1368.0, 8801.0], [1370.0, 7448.0], [1372.0, 4580.0], [1374.0, 7260.0], [1390.0, 9158.0], [1384.0, 4970.0], [1396.0, 6434.0], [1398.0, 8598.0], [1400.0, 8471.0], [1404.0, 7869.0], [1376.0, 9195.0], [1380.0, 6108.0], [1406.0, 8204.0], [1416.0, 5540.0], [1408.0, 6430.0], [1410.0, 7478.0], [1412.0, 8090.0], [1438.0, 6526.666666666667], [1420.0, 7753.0], [1422.0, 7394.0], [1418.0, 6738.0], [1414.0, 5929.0], [1440.0, 3840.0], [1448.0, 6804.0], [1428.0, 7574.0], [1426.0, 7580.0], [1424.0, 7616.0], [1432.0, 7387.0], [1434.0, 6113.0], [1436.0, 6743.0], [1085.0, 12828.0], [1087.0, 10881.0], [1057.0, 15978.0], [1059.0, 12751.0], [1061.0, 15956.0], [1063.0, 14684.0], [1065.0, 15046.0], [1067.0, 12972.0], [1069.0, 11787.0], [1071.0, 13123.0], [1083.0, 14433.0], [1081.0, 18892.0], [1079.0, 14380.0], [1077.0, 18943.0], [1075.0, 18372.0], [1073.0, 18469.0], [1055.0, 19446.0], [1025.0, 16804.0], [1027.0, 20547.0], [1029.0, 20546.0], [1031.0, 20563.0], [1033.0, 20458.0], [1035.0, 15583.0], [1039.0, 18698.0], [1053.0, 14445.0], [1051.0, 19628.0], [1049.0, 12949.0], [1047.0, 12907.0], [1045.0, 19782.0], [1043.0, 19689.0], [1041.0, 19274.0], [1093.0, 9435.0], [1145.0, 14989.0], [1149.0, 15193.0], [1109.0, 10875.5], [1107.0, 14758.0], [1105.0, 15015.0], [1111.0, 14916.0], [1113.0, 13421.0], [1115.0, 15308.0], [1117.0, 11921.0], [1103.0, 13779.0], [1101.0, 11675.0], [1099.0, 14370.0], [1097.0, 12848.0], [1095.0, 10608.0], [1091.0, 10964.0], [1089.0, 18126.0], [1119.0, 17761.0], [1137.0, 16909.0], [1139.0, 9843.0], [1141.0, 11668.0], [1143.0, 13180.0], [1133.0, 15975.0], [1131.0, 12884.0], [1129.0, 11148.0], [1127.0, 16085.0], [1125.0, 11939.0], [1123.0, 17780.0], [1121.0, 17758.0], [1135.0, 16048.0], [1151.0, 7270.5], [1147.0, 13192.0], [1167.0, 16622.0], [1201.0, 10684.0], [1209.0, 14919.0], [1213.0, 8955.0], [1157.0, 10442.0], [1153.0, 16815.0], [1155.0, 16826.0], [1181.0, 15069.0], [1179.0, 15603.0], [1177.0, 16467.0], [1175.0, 15245.0], [1173.0, 16472.0], [1171.0, 12873.0], [1169.0, 12836.0], [1165.0, 15535.0], [1163.0, 16608.0], [1161.0, 13047.0], [1159.0, 16618.0], [1203.0, 13088.0], [1205.0, 14081.0], [1207.0, 12115.0], [1187.0, 10405.0], [1185.0, 10498.0], [1189.0, 12877.0], [1191.0, 12920.0], [1193.0, 12925.0], [1195.0, 8853.0], [1197.0, 10487.0], [1199.0, 13779.0], [1215.0, 13137.0], [1211.0, 10900.0], [1223.0, 15981.0], [1225.0, 15928.0], [1221.0, 16022.0], [1219.0, 15657.0], [1217.0, 15718.0], [1227.0, 15984.0], [1229.0, 15832.0], [1231.0, 13903.0], [1247.0, 15695.0], [1245.0, 15288.0], [1243.0, 12190.0], [1241.0, 15614.0], [1239.0, 15223.0], [1237.0, 14952.0], [1235.0, 9185.0], [1233.0, 15917.0], [1265.0, 15434.0], [1267.0, 11156.5], [1269.0, 15353.0], [1271.0, 8944.0], [1279.0, 12935.0], [1249.0, 15571.0], [1251.0, 11117.0], [1253.0, 10811.0], [1255.0, 12468.0], [1257.0, 12276.0], [1259.0, 15392.0], [1261.0, 15593.0], [1263.0, 15466.0], [1277.0, 7798.0], [1275.0, 14967.5], [1273.0, 9004.0], [1283.0, 10152.75], [1339.0, 6228.0], [1303.0, 11900.0], [1301.0, 12715.0], [1299.0, 8536.0], [1297.0, 13963.0], [1305.0, 9168.0], [1307.0, 13234.0], [1309.0, 12860.0], [1311.0, 12427.0], [1281.0, 14573.0], [1285.0, 8673.5], [1287.0, 7090.0], [1289.0, 13388.0], [1291.0, 13034.0], [1313.0, 12392.0], [1319.0, 7749.0], [1321.0, 7811.0], [1323.0, 4754.0], [1327.0, 9159.0], [1325.0, 11389.0], [1341.0, 11519.0], [1337.0, 6324.0], [1335.0, 9538.0], [1333.0, 7728.0], [1331.0, 6124.0], [1295.0, 7007.0], [1293.0, 13022.0], [1351.0, 4868.5], [1345.0, 8174.5], [1347.0, 4531.0], [1349.0, 10524.0], [1353.0, 10367.0], [1355.0, 9980.0], [1359.0, 10857.0], [1357.0, 10669.0], [1393.0, 7324.333333333333], [1363.0, 7368.5], [1361.0, 9792.0], [1365.0, 10416.0], [1367.0, 10104.0], [1369.0, 9812.0], [1371.0, 6095.0], [1373.0, 9951.0], [1383.0, 7476.5], [1385.0, 5359.666666666667], [1391.0, 5224.0], [1389.0, 9228.0], [1387.0, 8508.0], [1395.0, 8270.0], [1397.0, 8283.5], [1401.0, 3963.0], [1403.0, 8421.0], [1405.0, 8401.0], [1407.0, 7967.0], [1377.0, 9760.0], [1381.0, 8980.5], [1419.0, 3974.5], [1409.0, 7506.0], [1411.0, 8129.0], [1413.0, 6414.5], [1439.0, 5493.0], [1421.0, 7481.0], [1417.0, 6413.0], [1415.0, 4731.5], [1423.0, 4729.333333333333], [1441.0, 7235.0], [1443.0, 5578.0], [1447.0, 6396.25], [1445.0, 6934.0], [1449.0, 6080.714285714285], [1451.0, 6804.0], [1431.0, 5726.0], [1429.0, 7466.0], [1427.0, 7575.0], [1425.0, 7564.0], [1433.0, 6738.0], [1435.0, 6163.0], [1437.0, 5925.25], [1.0, 106545.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[756.1540000000005, 27602.499333333384]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1451.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 76.28333333333333, "minX": 1.63725522E12, "maxY": 1165157.8, "series": [{"data": [[1.63725522E12, 180522.16666666666], [1.63725534E12, 573665.7166666667], [1.63725528E12, 1165157.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63725522E12, 4838.816666666667], [1.63725534E12, 76.28333333333333], [1.63725528E12, 1215.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725534E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18674.03491495078, "minX": 1.63725522E12, "maxY": 103465.5, "series": [{"data": [[1.63725522E12, 18674.03491495078], [1.63725534E12, 103465.5], [1.63725528E12, 50311.08635097487]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725534E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18448.186213070712, "minX": 1.63725522E12, "maxY": 54757.54166666667, "series": [{"data": [[1.63725522E12, 18448.186213070712], [1.63725534E12, 54757.54166666667], [1.63725528E12, 43013.97771587745]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725534E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8804.824529991047, "minX": 1.63725522E12, "maxY": 42688.75000000001, "series": [{"data": [[1.63725522E12, 8804.824529991047], [1.63725534E12, 42688.75000000001], [1.63725528E12, 30113.34261838441]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725534E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2272.0, "minX": 1.63725522E12, "maxY": 114961.0, "series": [{"data": [[1.63725522E12, 41468.0], [1.63725534E12, 114961.0], [1.63725528E12, 96401.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63725522E12, 2272.0], [1.63725534E12, 92977.0], [1.63725528E12, 29778.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63725522E12, 28297.2], [1.63725534E12, 110631.40000000001], [1.63725528E12, 71570.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63725522E12, 36687.96999999998], [1.63725534E12, 114961.0], [1.63725528E12, 93811.36000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63725522E12, 31685.6], [1.63725534E12, 114407.4], [1.63725528E12, 83523.05]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725534E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4868.5, "minX": 1.0, "maxY": 103709.0, "series": [{"data": [[33.0, 17558.0], [2.0, 80314.0], [37.0, 30633.0], [38.0, 15340.0], [44.0, 20079.0], [46.0, 43278.0], [3.0, 82715.0], [48.0, 26715.0], [53.0, 10964.0], [52.0, 23853.0], [56.0, 19549.5], [4.0, 103709.0], [82.0, 15602.0], [5.0, 62501.0], [89.0, 10875.0], [6.0, 49087.0], [7.0, 46299.5], [8.0, 48650.0], [9.0, 40361.0], [10.0, 47307.0], [11.0, 53500.0], [12.0, 43776.0], [13.0, 53859.5], [14.0, 4868.5], [15.0, 28827.0], [1.0, 88579.0], [17.0, 8508.0], [18.0, 8699.0], [19.0, 13388.0], [21.0, 51185.0], [22.0, 13034.0], [23.0, 10043.0], [24.0, 19437.0], [26.0, 7535.0], [27.0, 10358.5], [28.0, 24423.0], [29.0, 6284.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 21547.0], [2.0, 100731.5], [37.0, 33562.0], [38.0, 19702.5], [44.0, 24029.0], [46.0, 42631.0], [3.0, 31987.5], [48.0, 28449.0], [53.0, 14379.0], [52.0, 26045.0], [56.0, 16824.5], [4.0, 32070.5], [82.0, 17744.5], [5.0, 66933.0], [89.0, 15340.0], [6.0, 57335.0], [7.0, 48597.0], [8.0, 42545.0], [9.0, 36561.5], [10.0, 47708.0], [11.0, 37759.0], [12.0, 43961.0], [13.0, 46936.5], [15.0, 34513.0], [1.0, 54129.0], [18.0, 40219.0], [19.0, 35087.0], [21.0, 52236.5], [22.0, 16085.0], [23.0, 14560.5], [24.0, 19782.0], [27.0, 31786.0], [28.0, 26695.0], [29.0, 35910.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4868.5, "minX": 1.0, "maxY": 66933.0, "series": [{"data": [[33.0, 17235.0], [2.0, 53374.5], [37.0, 28520.5], [38.0, 15339.0], [44.0, 20079.0], [46.0, 43260.0], [3.0, 22076.0], [48.0, 26713.5], [53.0, 10962.0], [52.0, 23851.0], [56.0, 19549.5], [4.0, 55851.5], [82.0, 15521.0], [5.0, 57881.0], [89.0, 10811.0], [6.0, 13234.0], [7.0, 46298.5], [8.0, 43874.0], [9.0, 34006.0], [10.0, 47120.0], [11.0, 47960.0], [12.0, 39051.0], [13.0, 41329.5], [14.0, 4868.5], [15.0, 28629.0], [1.0, 56491.0], [17.0, 8508.0], [18.0, 8699.0], [19.0, 13388.0], [21.0, 50840.0], [22.0, 13034.0], [23.0, 10042.0], [24.0, 17717.0], [26.0, 7535.0], [27.0, 10238.5], [28.0, 24422.0], [29.0, 6271.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 21488.5], [2.0, 7663.5], [37.0, 33562.0], [38.0, 19702.5], [44.0, 24029.0], [46.0, 42631.0], [3.0, 29237.5], [48.0, 28410.0], [53.0, 14379.0], [52.0, 26045.0], [56.0, 16824.5], [4.0, 32070.5], [82.0, 17744.5], [5.0, 66933.0], [89.0, 15340.0], [6.0, 57335.0], [7.0, 48597.0], [8.0, 42545.0], [9.0, 34899.0], [10.0, 47708.0], [11.0, 37759.0], [12.0, 43135.0], [13.0, 46936.5], [15.0, 34412.0], [1.0, 18057.0], [18.0, 40218.0], [19.0, 35087.0], [21.0, 52236.0], [22.0, 16085.0], [23.0, 14560.5], [24.0, 19782.0], [27.0, 31786.0], [28.0, 26450.0], [29.0, 35910.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 89.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.63725522E12, "maxY": 25.0, "series": [{"data": [[1.63725522E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63725522E12, "maxY": 10.016666666666667, "series": [{"data": [[1.63725522E12, 5.616666666666666], [1.63725534E12, 0.38333333333333336], [1.63725528E12, 3.683333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63725522E12, 2.9833333333333334], [1.63725528E12, 0.016666666666666666]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.63725522E12, 10.016666666666667], [1.63725528E12, 2.2333333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.63725528E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.63725534E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.ConnectionClosedException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725534E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63725522E12, "maxY": 10.016666666666667, "series": [{"data": [[1.63725522E12, 8.6], [1.63725534E12, 0.38333333333333336], [1.63725528E12, 3.7]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.63725522E12, 10.016666666666667], [1.63725534E12, 0.016666666666666666], [1.63725528E12, 2.283333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725534E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63725522E12, "maxY": 10.016666666666667, "series": [{"data": [[1.63725522E12, 8.6], [1.63725534E12, 0.38333333333333336], [1.63725528E12, 3.7]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63725522E12, 10.016666666666667], [1.63725534E12, 0.016666666666666666], [1.63725528E12, 2.283333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725534E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

