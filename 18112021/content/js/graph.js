/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2384.0, "minX": 0.0, "maxY": 52834.0, "series": [{"data": [[0.0, 2384.0], [0.1, 2570.0], [0.2, 2658.0], [0.3, 3257.0], [0.4, 4095.0], [0.5, 4149.0], [0.6, 4288.0], [0.7, 4294.0], [0.8, 4315.0], [0.9, 4346.0], [1.0, 4424.0], [1.1, 4439.0], [1.2, 4500.0], [1.3, 4503.0], [1.4, 4648.0], [1.5, 4697.0], [1.6, 4719.0], [1.7, 4734.0], [1.8, 4769.0], [1.9, 4831.0], [2.0, 4869.0], [2.1, 4885.0], [2.2, 4974.0], [2.3, 5040.0], [2.4, 5191.0], [2.5, 5238.0], [2.6, 5272.0], [2.7, 5451.0], [2.8, 5462.0], [2.9, 5617.0], [3.0, 5647.0], [3.1, 5719.0], [3.2, 5724.0], [3.3, 5802.0], [3.4, 5811.0], [3.5, 5838.0], [3.6, 5840.0], [3.7, 5859.0], [3.8, 5888.0], [3.9, 5902.0], [4.0, 5907.0], [4.1, 5940.0], [4.2, 5943.0], [4.3, 5980.0], [4.4, 5985.0], [4.5, 6020.0], [4.6, 6028.0], [4.7, 6099.0], [4.8, 6114.0], [4.9, 6122.0], [5.0, 6131.0], [5.1, 6154.0], [5.2, 6192.0], [5.3, 6203.0], [5.4, 6219.0], [5.5, 6233.0], [5.6, 6260.0], [5.7, 6315.0], [5.8, 6327.0], [5.9, 6470.0], [6.0, 6609.0], [6.1, 6635.0], [6.2, 6702.0], [6.3, 6706.0], [6.4, 6808.0], [6.5, 6893.0], [6.6, 6979.0], [6.7, 7268.0], [6.8, 7463.0], [6.9, 7482.0], [7.0, 7540.0], [7.1, 7572.0], [7.2, 7575.0], [7.3, 7581.0], [7.4, 7604.0], [7.5, 7607.0], [7.6, 7652.0], [7.7, 7663.0], [7.8, 7675.0], [7.9, 7679.0], [8.0, 7687.0], [8.1, 7711.0], [8.2, 7726.0], [8.3, 7750.0], [8.4, 7787.0], [8.5, 7789.0], [8.6, 7814.0], [8.7, 7828.0], [8.8, 7853.0], [8.9, 7855.0], [9.0, 7867.0], [9.1, 7873.0], [9.2, 7898.0], [9.3, 7907.0], [9.4, 7931.0], [9.5, 7958.0], [9.6, 8089.0], [9.7, 8149.0], [9.8, 8318.0], [9.9, 8324.0], [10.0, 8496.0], [10.1, 8573.0], [10.2, 8771.0], [10.3, 9010.0], [10.4, 9184.0], [10.5, 9221.0], [10.6, 9257.0], [10.7, 9288.0], [10.8, 9297.0], [10.9, 9300.0], [11.0, 9316.0], [11.1, 9367.0], [11.2, 9407.0], [11.3, 9426.0], [11.4, 9437.0], [11.5, 9461.0], [11.6, 9499.0], [11.7, 9531.0], [11.8, 9573.0], [11.9, 9586.0], [12.0, 9617.0], [12.1, 9626.0], [12.2, 9661.0], [12.3, 9664.0], [12.4, 9689.0], [12.5, 9691.0], [12.6, 9715.0], [12.7, 9720.0], [12.8, 9746.0], [12.9, 9792.0], [13.0, 9807.0], [13.1, 9812.0], [13.2, 9823.0], [13.3, 9837.0], [13.4, 9931.0], [13.5, 10041.0], [13.6, 10239.0], [13.7, 10249.0], [13.8, 10403.0], [13.9, 10523.0], [14.0, 10616.0], [14.1, 10630.0], [14.2, 10658.0], [14.3, 10665.0], [14.4, 10727.0], [14.5, 10780.0], [14.6, 10884.0], [14.7, 10910.0], [14.8, 10922.0], [14.9, 11050.0], [15.0, 11053.0], [15.1, 11072.0], [15.2, 11080.0], [15.3, 11081.0], [15.4, 11113.0], [15.5, 11113.0], [15.6, 11138.0], [15.7, 11144.0], [15.8, 11155.0], [15.9, 11158.0], [16.0, 11165.0], [16.1, 11169.0], [16.2, 11177.0], [16.3, 11202.0], [16.4, 11247.0], [16.5, 11247.0], [16.6, 11253.0], [16.7, 11277.0], [16.8, 11391.0], [16.9, 11391.0], [17.0, 11411.0], [17.1, 11415.0], [17.2, 11451.0], [17.3, 11454.0], [17.4, 11470.0], [17.5, 11487.0], [17.6, 11506.0], [17.7, 11515.0], [17.8, 11540.0], [17.9, 11549.0], [18.0, 11689.0], [18.1, 11697.0], [18.2, 11759.0], [18.3, 11763.0], [18.4, 11821.0], [18.5, 11862.0], [18.6, 11881.0], [18.7, 11895.0], [18.8, 12036.0], [18.9, 12115.0], [19.0, 12153.0], [19.1, 12212.0], [19.2, 12238.0], [19.3, 12266.0], [19.4, 12297.0], [19.5, 12342.0], [19.6, 12412.0], [19.7, 12412.0], [19.8, 12492.0], [19.9, 12509.0], [20.0, 12522.0], [20.1, 12525.0], [20.2, 12528.0], [20.3, 12534.0], [20.4, 12547.0], [20.5, 12550.0], [20.6, 12565.0], [20.7, 12571.0], [20.8, 12614.0], [20.9, 12639.0], [21.0, 12650.0], [21.1, 12671.0], [21.2, 12715.0], [21.3, 12728.0], [21.4, 12786.0], [21.5, 12814.0], [21.6, 12843.0], [21.7, 12865.0], [21.8, 12896.0], [21.9, 12904.0], [22.0, 12921.0], [22.1, 12928.0], [22.2, 12932.0], [22.3, 12935.0], [22.4, 12940.0], [22.5, 12946.0], [22.6, 12957.0], [22.7, 12964.0], [22.8, 12969.0], [22.9, 12978.0], [23.0, 12978.0], [23.1, 12980.0], [23.2, 12985.0], [23.3, 12986.0], [23.4, 12996.0], [23.5, 13004.0], [23.6, 13014.0], [23.7, 13027.0], [23.8, 13027.0], [23.9, 13044.0], [24.0, 13053.0], [24.1, 13055.0], [24.2, 13065.0], [24.3, 13077.0], [24.4, 13096.0], [24.5, 13099.0], [24.6, 13103.0], [24.7, 13104.0], [24.8, 13128.0], [24.9, 13130.0], [25.0, 13156.0], [25.1, 13172.0], [25.2, 13187.0], [25.3, 13208.0], [25.4, 13214.0], [25.5, 13216.0], [25.6, 13244.0], [25.7, 13253.0], [25.8, 13260.0], [25.9, 13318.0], [26.0, 13338.0], [26.1, 13360.0], [26.2, 13366.0], [26.3, 13383.0], [26.4, 13408.0], [26.5, 13413.0], [26.6, 13421.0], [26.7, 13463.0], [26.8, 13509.0], [26.9, 13512.0], [27.0, 13522.0], [27.1, 13523.0], [27.2, 13574.0], [27.3, 13581.0], [27.4, 13666.0], [27.5, 13681.0], [27.6, 13786.0], [27.7, 13796.0], [27.8, 13837.0], [27.9, 13838.0], [28.0, 13852.0], [28.1, 13881.0], [28.2, 13902.0], [28.3, 13923.0], [28.4, 13938.0], [28.5, 13943.0], [28.6, 13959.0], [28.7, 13983.0], [28.8, 14005.0], [28.9, 14005.0], [29.0, 14011.0], [29.1, 14013.0], [29.2, 14016.0], [29.3, 14024.0], [29.4, 14051.0], [29.5, 14067.0], [29.6, 14116.0], [29.7, 14116.0], [29.8, 14164.0], [29.9, 14171.0], [30.0, 14198.0], [30.1, 14199.0], [30.2, 14224.0], [30.3, 14291.0], [30.4, 14327.0], [30.5, 14335.0], [30.6, 14362.0], [30.7, 14389.0], [30.8, 14392.0], [30.9, 14414.0], [31.0, 14441.0], [31.1, 14462.0], [31.2, 14466.0], [31.3, 14479.0], [31.4, 14524.0], [31.5, 14540.0], [31.6, 14580.0], [31.7, 14610.0], [31.8, 14639.0], [31.9, 14644.0], [32.0, 14665.0], [32.1, 14665.0], [32.2, 14692.0], [32.3, 14698.0], [32.4, 14713.0], [32.5, 14724.0], [32.6, 14731.0], [32.7, 14742.0], [32.8, 14754.0], [32.9, 14764.0], [33.0, 14794.0], [33.1, 14803.0], [33.2, 14823.0], [33.3, 14826.0], [33.4, 14833.0], [33.5, 14839.0], [33.6, 14852.0], [33.7, 14852.0], [33.8, 14857.0], [33.9, 14875.0], [34.0, 14903.0], [34.1, 14906.0], [34.2, 14938.0], [34.3, 14942.0], [34.4, 14946.0], [34.5, 14975.0], [34.6, 14976.0], [34.7, 15012.0], [34.8, 15018.0], [34.9, 15026.0], [35.0, 15029.0], [35.1, 15050.0], [35.2, 15056.0], [35.3, 15058.0], [35.4, 15059.0], [35.5, 15085.0], [35.6, 15089.0], [35.7, 15111.0], [35.8, 15121.0], [35.9, 15134.0], [36.0, 15136.0], [36.1, 15152.0], [36.2, 15160.0], [36.3, 15170.0], [36.4, 15179.0], [36.5, 15234.0], [36.6, 15237.0], [36.7, 15252.0], [36.8, 15263.0], [36.9, 15269.0], [37.0, 15284.0], [37.1, 15288.0], [37.2, 15289.0], [37.3, 15303.0], [37.4, 15305.0], [37.5, 15354.0], [37.6, 15358.0], [37.7, 15385.0], [37.8, 15410.0], [37.9, 15450.0], [38.0, 15453.0], [38.1, 15458.0], [38.2, 15463.0], [38.3, 15472.0], [38.4, 15533.0], [38.5, 15560.0], [38.6, 15575.0], [38.7, 15615.0], [38.8, 15626.0], [38.9, 15637.0], [39.0, 15666.0], [39.1, 15693.0], [39.2, 15700.0], [39.3, 15726.0], [39.4, 15733.0], [39.5, 15747.0], [39.6, 15753.0], [39.7, 15765.0], [39.8, 15799.0], [39.9, 15863.0], [40.0, 15866.0], [40.1, 15877.0], [40.2, 15882.0], [40.3, 15906.0], [40.4, 15906.0], [40.5, 15918.0], [40.6, 15918.0], [40.7, 15933.0], [40.8, 15948.0], [40.9, 15955.0], [41.0, 15960.0], [41.1, 15966.0], [41.2, 15968.0], [41.3, 15974.0], [41.4, 15974.0], [41.5, 15993.0], [41.6, 16002.0], [41.7, 16007.0], [41.8, 16023.0], [41.9, 16045.0], [42.0, 16047.0], [42.1, 16066.0], [42.2, 16109.0], [42.3, 16124.0], [42.4, 16147.0], [42.5, 16160.0], [42.6, 16171.0], [42.7, 16223.0], [42.8, 16371.0], [42.9, 16412.0], [43.0, 16414.0], [43.1, 16457.0], [43.2, 16469.0], [43.3, 16512.0], [43.4, 16515.0], [43.5, 16581.0], [43.6, 16601.0], [43.7, 16635.0], [43.8, 16675.0], [43.9, 16700.0], [44.0, 16706.0], [44.1, 16719.0], [44.2, 16741.0], [44.3, 16749.0], [44.4, 16767.0], [44.5, 16803.0], [44.6, 16808.0], [44.7, 16852.0], [44.8, 16858.0], [44.9, 16896.0], [45.0, 16898.0], [45.1, 16929.0], [45.2, 16931.0], [45.3, 16972.0], [45.4, 17001.0], [45.5, 17012.0], [45.6, 17024.0], [45.7, 17055.0], [45.8, 17072.0], [45.9, 17088.0], [46.0, 17091.0], [46.1, 17114.0], [46.2, 17123.0], [46.3, 17157.0], [46.4, 17199.0], [46.5, 17209.0], [46.6, 17211.0], [46.7, 17221.0], [46.8, 17224.0], [46.9, 17239.0], [47.0, 17244.0], [47.1, 17289.0], [47.2, 17295.0], [47.3, 17464.0], [47.4, 17473.0], [47.5, 17543.0], [47.6, 17581.0], [47.7, 17625.0], [47.8, 17638.0], [47.9, 17677.0], [48.0, 17689.0], [48.1, 17718.0], [48.2, 17750.0], [48.3, 17830.0], [48.4, 17837.0], [48.5, 17916.0], [48.6, 17926.0], [48.7, 17938.0], [48.8, 17941.0], [48.9, 17943.0], [49.0, 17951.0], [49.1, 17978.0], [49.2, 17985.0], [49.3, 18029.0], [49.4, 18030.0], [49.5, 18045.0], [49.6, 18059.0], [49.7, 18078.0], [49.8, 18102.0], [49.9, 18137.0], [50.0, 18156.0], [50.1, 18158.0], [50.2, 18160.0], [50.3, 18169.0], [50.4, 18191.0], [50.5, 18223.0], [50.6, 18223.0], [50.7, 18257.0], [50.8, 18258.0], [50.9, 18264.0], [51.0, 18264.0], [51.1, 18277.0], [51.2, 18314.0], [51.3, 18330.0], [51.4, 18336.0], [51.5, 18355.0], [51.6, 18367.0], [51.7, 18380.0], [51.8, 18382.0], [51.9, 18396.0], [52.0, 18425.0], [52.1, 18436.0], [52.2, 18440.0], [52.3, 18442.0], [52.4, 18443.0], [52.5, 18457.0], [52.6, 18464.0], [52.7, 18476.0], [52.8, 18540.0], [52.9, 18571.0], [53.0, 18574.0], [53.1, 18606.0], [53.2, 18621.0], [53.3, 18683.0], [53.4, 18725.0], [53.5, 18751.0], [53.6, 18770.0], [53.7, 18802.0], [53.8, 18827.0], [53.9, 18830.0], [54.0, 18832.0], [54.1, 18861.0], [54.2, 18879.0], [54.3, 18899.0], [54.4, 18925.0], [54.5, 18963.0], [54.6, 18973.0], [54.7, 19008.0], [54.8, 19017.0], [54.9, 19046.0], [55.0, 19063.0], [55.1, 19097.0], [55.2, 19102.0], [55.3, 19109.0], [55.4, 19117.0], [55.5, 19135.0], [55.6, 19144.0], [55.7, 19151.0], [55.8, 19176.0], [55.9, 19190.0], [56.0, 19253.0], [56.1, 19335.0], [56.2, 19359.0], [56.3, 19491.0], [56.4, 19511.0], [56.5, 19588.0], [56.6, 19669.0], [56.7, 19787.0], [56.8, 19800.0], [56.9, 19833.0], [57.0, 19900.0], [57.1, 19910.0], [57.2, 19911.0], [57.3, 20042.0], [57.4, 20056.0], [57.5, 20075.0], [57.6, 20091.0], [57.7, 20098.0], [57.8, 20099.0], [57.9, 20125.0], [58.0, 20175.0], [58.1, 20208.0], [58.2, 20226.0], [58.3, 20254.0], [58.4, 20278.0], [58.5, 20326.0], [58.6, 20345.0], [58.7, 20371.0], [58.8, 20387.0], [58.9, 20446.0], [59.0, 20447.0], [59.1, 20457.0], [59.2, 20468.0], [59.3, 20481.0], [59.4, 20487.0], [59.5, 20516.0], [59.6, 20529.0], [59.7, 20551.0], [59.8, 20561.0], [59.9, 20575.0], [60.0, 20641.0], [60.1, 20687.0], [60.2, 20690.0], [60.3, 20696.0], [60.4, 20697.0], [60.5, 20703.0], [60.6, 20711.0], [60.7, 20748.0], [60.8, 20753.0], [60.9, 20788.0], [61.0, 20795.0], [61.1, 20809.0], [61.2, 20828.0], [61.3, 20904.0], [61.4, 20911.0], [61.5, 21021.0], [61.6, 21040.0], [61.7, 21087.0], [61.8, 21091.0], [61.9, 21117.0], [62.0, 21121.0], [62.1, 21198.0], [62.2, 21209.0], [62.3, 21248.0], [62.4, 21267.0], [62.5, 21281.0], [62.6, 21294.0], [62.7, 21364.0], [62.8, 21370.0], [62.9, 21409.0], [63.0, 21410.0], [63.1, 21471.0], [63.2, 21473.0], [63.3, 21549.0], [63.4, 21567.0], [63.5, 21613.0], [63.6, 21656.0], [63.7, 21668.0], [63.8, 21676.0], [63.9, 21758.0], [64.0, 21800.0], [64.1, 21808.0], [64.2, 21810.0], [64.3, 21847.0], [64.4, 21857.0], [64.5, 21876.0], [64.6, 21882.0], [64.7, 21950.0], [64.8, 22161.0], [64.9, 22197.0], [65.0, 22247.0], [65.1, 22269.0], [65.2, 22279.0], [65.3, 22428.0], [65.4, 22436.0], [65.5, 22526.0], [65.6, 22534.0], [65.7, 22731.0], [65.8, 22731.0], [65.9, 22751.0], [66.0, 22779.0], [66.1, 22948.0], [66.2, 22965.0], [66.3, 23008.0], [66.4, 23034.0], [66.5, 23044.0], [66.6, 23053.0], [66.7, 23086.0], [66.8, 23095.0], [66.9, 23130.0], [67.0, 23138.0], [67.1, 23142.0], [67.2, 23143.0], [67.3, 23175.0], [67.4, 23183.0], [67.5, 23200.0], [67.6, 23215.0], [67.7, 23229.0], [67.8, 23251.0], [67.9, 23297.0], [68.0, 23366.0], [68.1, 23476.0], [68.2, 23476.0], [68.3, 23617.0], [68.4, 23667.0], [68.5, 23748.0], [68.6, 23794.0], [68.7, 23801.0], [68.8, 23806.0], [68.9, 23855.0], [69.0, 23931.0], [69.1, 24000.0], [69.2, 24018.0], [69.3, 24066.0], [69.4, 24132.0], [69.5, 24163.0], [69.6, 24194.0], [69.7, 24249.0], [69.8, 24272.0], [69.9, 24336.0], [70.0, 24401.0], [70.1, 24418.0], [70.2, 24521.0], [70.3, 24535.0], [70.4, 24718.0], [70.5, 24792.0], [70.6, 24830.0], [70.7, 24933.0], [70.8, 24969.0], [70.9, 25066.0], [71.0, 25094.0], [71.1, 25151.0], [71.2, 25193.0], [71.3, 25217.0], [71.4, 25242.0], [71.5, 25306.0], [71.6, 25369.0], [71.7, 25457.0], [71.8, 25577.0], [71.9, 25607.0], [72.0, 25625.0], [72.1, 25647.0], [72.2, 25647.0], [72.3, 25699.0], [72.4, 25844.0], [72.5, 25885.0], [72.6, 26000.0], [72.7, 26040.0], [72.8, 26067.0], [72.9, 26118.0], [73.0, 26137.0], [73.1, 26209.0], [73.2, 26222.0], [73.3, 26335.0], [73.4, 26360.0], [73.5, 26424.0], [73.6, 26543.0], [73.7, 26569.0], [73.8, 26575.0], [73.9, 26606.0], [74.0, 26620.0], [74.1, 26631.0], [74.2, 26739.0], [74.3, 26850.0], [74.4, 26922.0], [74.5, 27000.0], [74.6, 27035.0], [74.7, 27059.0], [74.8, 27083.0], [74.9, 27148.0], [75.0, 27174.0], [75.1, 27367.0], [75.2, 27394.0], [75.3, 27547.0], [75.4, 27718.0], [75.5, 27828.0], [75.6, 27858.0], [75.7, 27903.0], [75.8, 27922.0], [75.9, 28014.0], [76.0, 28020.0], [76.1, 28063.0], [76.2, 28104.0], [76.3, 28200.0], [76.4, 28213.0], [76.5, 28322.0], [76.6, 28327.0], [76.7, 28443.0], [76.8, 28446.0], [76.9, 28560.0], [77.0, 28573.0], [77.1, 28695.0], [77.2, 28721.0], [77.3, 28794.0], [77.4, 28803.0], [77.5, 28892.0], [77.6, 28898.0], [77.7, 28963.0], [77.8, 28975.0], [77.9, 29011.0], [78.0, 29083.0], [78.1, 29143.0], [78.2, 29152.0], [78.3, 29180.0], [78.4, 29222.0], [78.5, 29484.0], [78.6, 29511.0], [78.7, 29569.0], [78.8, 29652.0], [78.9, 29800.0], [79.0, 29837.0], [79.1, 30163.0], [79.2, 30176.0], [79.3, 30326.0], [79.4, 30376.0], [79.5, 30639.0], [79.6, 30727.0], [79.7, 30800.0], [79.8, 30834.0], [79.9, 30910.0], [80.0, 30971.0], [80.1, 31214.0], [80.2, 31280.0], [80.3, 31379.0], [80.4, 31395.0], [80.5, 31420.0], [80.6, 31452.0], [80.7, 31612.0], [80.8, 31961.0], [80.9, 32157.0], [81.0, 32334.0], [81.1, 32488.0], [81.2, 32533.0], [81.3, 32596.0], [81.4, 32671.0], [81.5, 32807.0], [81.6, 32954.0], [81.7, 33074.0], [81.8, 33095.0], [81.9, 33377.0], [82.0, 33385.0], [82.1, 33408.0], [82.2, 33508.0], [82.3, 33647.0], [82.4, 33802.0], [82.5, 33881.0], [82.6, 33922.0], [82.7, 33986.0], [82.8, 34048.0], [82.9, 34143.0], [83.0, 34150.0], [83.1, 34212.0], [83.2, 34280.0], [83.3, 34573.0], [83.4, 34576.0], [83.5, 34656.0], [83.6, 34668.0], [83.7, 34771.0], [83.8, 34805.0], [83.9, 34834.0], [84.0, 34837.0], [84.1, 34949.0], [84.2, 34976.0], [84.3, 35117.0], [84.4, 35155.0], [84.5, 35167.0], [84.6, 35204.0], [84.7, 35233.0], [84.8, 35260.0], [84.9, 35331.0], [85.0, 35332.0], [85.1, 35351.0], [85.2, 35357.0], [85.3, 35384.0], [85.4, 35387.0], [85.5, 35414.0], [85.6, 35483.0], [85.7, 35568.0], [85.8, 35692.0], [85.9, 35785.0], [86.0, 35864.0], [86.1, 35890.0], [86.2, 36029.0], [86.3, 36150.0], [86.4, 36319.0], [86.5, 36388.0], [86.6, 36440.0], [86.7, 36491.0], [86.8, 36534.0], [86.9, 36674.0], [87.0, 36679.0], [87.1, 36850.0], [87.2, 36868.0], [87.3, 36929.0], [87.4, 36976.0], [87.5, 37156.0], [87.6, 37208.0], [87.7, 37266.0], [87.8, 37276.0], [87.9, 37336.0], [88.0, 37353.0], [88.1, 37429.0], [88.2, 37543.0], [88.3, 37700.0], [88.4, 37767.0], [88.5, 37806.0], [88.6, 37964.0], [88.7, 38039.0], [88.8, 38118.0], [88.9, 38129.0], [89.0, 38172.0], [89.1, 38360.0], [89.2, 38503.0], [89.3, 38621.0], [89.4, 38646.0], [89.5, 39329.0], [89.6, 39397.0], [89.7, 39498.0], [89.8, 39764.0], [89.9, 39771.0], [90.0, 39886.0], [90.1, 39906.0], [90.2, 40143.0], [90.3, 40156.0], [90.4, 40220.0], [90.5, 40346.0], [90.6, 40465.0], [90.7, 40520.0], [90.8, 40600.0], [90.9, 40661.0], [91.0, 40900.0], [91.1, 40922.0], [91.2, 40997.0], [91.3, 41014.0], [91.4, 41042.0], [91.5, 41114.0], [91.6, 41152.0], [91.7, 41197.0], [91.8, 41351.0], [91.9, 41352.0], [92.0, 41404.0], [92.1, 41434.0], [92.2, 41471.0], [92.3, 41529.0], [92.4, 41664.0], [92.5, 41672.0], [92.6, 41709.0], [92.7, 41712.0], [92.8, 41717.0], [92.9, 41747.0], [93.0, 41810.0], [93.1, 41823.0], [93.2, 41938.0], [93.3, 41949.0], [93.4, 41988.0], [93.5, 42039.0], [93.6, 42060.0], [93.7, 42069.0], [93.8, 42119.0], [93.9, 42156.0], [94.0, 42277.0], [94.1, 42323.0], [94.2, 42367.0], [94.3, 42426.0], [94.4, 42483.0], [94.5, 42506.0], [94.6, 42539.0], [94.7, 42615.0], [94.8, 42693.0], [94.9, 42729.0], [95.0, 42793.0], [95.1, 42801.0], [95.2, 42978.0], [95.3, 43034.0], [95.4, 43168.0], [95.5, 43218.0], [95.6, 43381.0], [95.7, 43421.0], [95.8, 43545.0], [95.9, 43680.0], [96.0, 43751.0], [96.1, 43812.0], [96.2, 43834.0], [96.3, 43843.0], [96.4, 43984.0], [96.5, 43992.0], [96.6, 44191.0], [96.7, 44192.0], [96.8, 44266.0], [96.9, 44286.0], [97.0, 44474.0], [97.1, 44516.0], [97.2, 44525.0], [97.3, 44531.0], [97.4, 44841.0], [97.5, 44847.0], [97.6, 44943.0], [97.7, 44953.0], [97.8, 45016.0], [97.9, 45438.0], [98.0, 45798.0], [98.1, 46092.0], [98.2, 46417.0], [98.3, 46442.0], [98.4, 46523.0], [98.5, 46560.0], [98.6, 46844.0], [98.7, 47023.0], [98.8, 47179.0], [98.9, 47484.0], [99.0, 48063.0], [99.1, 48135.0], [99.2, 48479.0], [99.3, 48724.0], [99.4, 48874.0], [99.5, 49516.0], [99.6, 50455.0], [99.7, 50870.0], [99.8, 52122.0], [99.9, 52413.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2300.0, "maxY": 24.0, "series": [{"data": [[34500.0, 2.0], [32900.0, 2.0], [35300.0, 9.0], [36100.0, 2.0], [37700.0, 3.0], [36900.0, 2.0], [38500.0, 2.0], [40100.0, 3.0], [39300.0, 2.0], [40900.0, 4.0], [42500.0, 3.0], [41700.0, 6.0], [43300.0, 1.0], [44100.0, 2.0], [44900.0, 3.0], [45700.0, 2.0], [46500.0, 2.0], [48100.0, 1.0], [52100.0, 2.0], [2300.0, 1.0], [2500.0, 1.0], [2600.0, 2.0], [3200.0, 1.0], [3800.0, 1.0], [4000.0, 1.0], [4300.0, 4.0], [4200.0, 3.0], [4100.0, 1.0], [4500.0, 3.0], [4400.0, 3.0], [4600.0, 2.0], [4700.0, 5.0], [4800.0, 4.0], [5000.0, 1.0], [4900.0, 2.0], [5100.0, 1.0], [5200.0, 3.0], [5400.0, 4.0], [5600.0, 3.0], [5700.0, 3.0], [5800.0, 9.0], [6000.0, 4.0], [6100.0, 8.0], [5900.0, 9.0], [6200.0, 6.0], [6300.0, 3.0], [6400.0, 1.0], [6600.0, 3.0], [6500.0, 1.0], [6700.0, 3.0], [6800.0, 2.0], [6900.0, 2.0], [7400.0, 3.0], [7200.0, 1.0], [7600.0, 10.0], [7500.0, 7.0], [7900.0, 4.0], [7800.0, 11.0], [7700.0, 7.0], [8000.0, 2.0], [8100.0, 1.0], [8200.0, 1.0], [8400.0, 2.0], [9200.0, 6.0], [9000.0, 1.0], [9400.0, 7.0], [9600.0, 9.0], [9800.0, 6.0], [10200.0, 2.0], [10000.0, 1.0], [10600.0, 5.0], [10400.0, 1.0], [11200.0, 8.0], [11000.0, 8.0], [10800.0, 2.0], [11400.0, 10.0], [11600.0, 3.0], [11800.0, 5.0], [12200.0, 6.0], [12000.0, 1.0], [12400.0, 4.0], [12600.0, 5.0], [13000.0, 16.0], [12800.0, 6.0], [13200.0, 9.0], [13400.0, 7.0], [13800.0, 7.0], [13600.0, 3.0], [14200.0, 4.0], [14000.0, 13.0], [14400.0, 8.0], [14600.0, 10.0], [14800.0, 14.0], [15000.0, 15.0], [15200.0, 13.0], [15600.0, 8.0], [15400.0, 9.0], [15800.0, 6.0], [16000.0, 9.0], [16200.0, 1.0], [16800.0, 8.0], [17200.0, 12.0], [16400.0, 6.0], [18000.0, 8.0], [17600.0, 6.0], [18400.0, 12.0], [18800.0, 10.0], [19200.0, 1.0], [20000.0, 8.0], [20400.0, 9.0], [19600.0, 2.0], [21200.0, 7.0], [20800.0, 4.0], [21600.0, 5.0], [22400.0, 4.0], [23200.0, 7.0], [24400.0, 3.0], [24000.0, 4.0], [23600.0, 2.0], [25200.0, 3.0], [24800.0, 2.0], [26000.0, 5.0], [25600.0, 7.0], [26400.0, 1.0], [26800.0, 2.0], [28400.0, 3.0], [28000.0, 4.0], [29600.0, 1.0], [28800.0, 4.0], [29200.0, 1.0], [30000.0, 1.0], [30800.0, 3.0], [31600.0, 1.0], [31200.0, 2.0], [32400.0, 2.0], [32000.0, 1.0], [34400.0, 1.0], [33600.0, 1.0], [32800.0, 1.0], [36800.0, 4.0], [35200.0, 5.0], [36000.0, 1.0], [40000.0, 1.0], [41600.0, 4.0], [42400.0, 3.0], [44000.0, 1.0], [44800.0, 3.0], [43200.0, 2.0], [46400.0, 4.0], [48000.0, 1.0], [48800.0, 1.0], [50400.0, 1.0], [52800.0, 1.0], [33900.0, 3.0], [34700.0, 2.0], [33100.0, 1.0], [35500.0, 2.0], [36300.0, 3.0], [37100.0, 1.0], [37900.0, 1.0], [40300.0, 1.0], [41100.0, 4.0], [41900.0, 4.0], [42700.0, 3.0], [43500.0, 1.0], [44300.0, 1.0], [47500.0, 1.0], [48300.0, 1.0], [17300.0, 1.0], [16500.0, 5.0], [16900.0, 5.0], [18100.0, 11.0], [17700.0, 3.0], [18500.0, 5.0], [19300.0, 3.0], [18900.0, 5.0], [19700.0, 1.0], [20100.0, 4.0], [20500.0, 8.0], [21300.0, 4.0], [20900.0, 3.0], [22500.0, 2.0], [22100.0, 3.0], [21700.0, 2.0], [22900.0, 4.0], [23300.0, 1.0], [23700.0, 4.0], [24100.0, 5.0], [24500.0, 3.0], [24900.0, 3.0], [25300.0, 2.0], [26100.0, 3.0], [26500.0, 5.0], [27300.0, 2.0], [26900.0, 2.0], [28100.0, 2.0], [28500.0, 3.0], [27700.0, 2.0], [28900.0, 3.0], [29300.0, 1.0], [29700.0, 1.0], [30100.0, 3.0], [30500.0, 1.0], [31300.0, 3.0], [30900.0, 2.0], [32500.0, 3.0], [32100.0, 1.0], [33800.0, 3.0], [34600.0, 3.0], [33000.0, 2.0], [35400.0, 2.0], [38600.0, 2.0], [37000.0, 1.0], [37800.0, 1.0], [39400.0, 2.0], [40200.0, 1.0], [41000.0, 3.0], [41800.0, 3.0], [42600.0, 3.0], [44200.0, 3.0], [45000.0, 1.0], [43400.0, 2.0], [46600.0, 1.0], [47400.0, 1.0], [33300.0, 2.0], [34100.0, 3.0], [34900.0, 2.0], [35700.0, 2.0], [36500.0, 1.0], [38100.0, 4.0], [37300.0, 4.0], [38900.0, 1.0], [39700.0, 4.0], [40500.0, 2.0], [41300.0, 4.0], [42100.0, 2.0], [42900.0, 2.0], [43700.0, 2.0], [44500.0, 5.0], [8300.0, 2.0], [8500.0, 2.0], [8700.0, 1.0], [9100.0, 2.0], [9300.0, 5.0], [9700.0, 6.0], [9500.0, 5.0], [10100.0, 1.0], [9900.0, 1.0], [10300.0, 1.0], [10700.0, 3.0], [10500.0, 2.0], [10900.0, 3.0], [11100.0, 13.0], [11300.0, 2.0], [11500.0, 5.0], [11700.0, 4.0], [12100.0, 3.0], [11900.0, 1.0], [12500.0, 14.0], [12300.0, 2.0], [12700.0, 5.0], [12900.0, 24.0], [13100.0, 11.0], [13300.0, 7.0], [13500.0, 8.0], [13700.0, 3.0], [13900.0, 8.0], [14100.0, 8.0], [14300.0, 7.0], [14700.0, 11.0], [14500.0, 4.0], [14900.0, 9.0], [15100.0, 12.0], [15300.0, 7.0], [15500.0, 4.0], [15700.0, 10.0], [15900.0, 20.0], [16100.0, 8.0], [16300.0, 1.0], [16600.0, 5.0], [17000.0, 11.0], [17400.0, 2.0], [18200.0, 10.0], [17800.0, 4.0], [18600.0, 4.0], [19000.0, 7.0], [19400.0, 2.0], [19800.0, 3.0], [20200.0, 5.0], [20600.0, 7.0], [21000.0, 5.0], [21400.0, 6.0], [21800.0, 10.0], [22200.0, 4.0], [23000.0, 8.0], [23400.0, 4.0], [22600.0, 1.0], [23800.0, 4.0], [24200.0, 3.0], [25000.0, 2.0], [25400.0, 2.0], [25800.0, 3.0], [26200.0, 3.0], [26600.0, 4.0], [27000.0, 5.0], [28600.0, 2.0], [27800.0, 3.0], [28200.0, 3.0], [29400.0, 1.0], [29000.0, 3.0], [29800.0, 2.0], [30600.0, 1.0], [31000.0, 1.0], [31400.0, 3.0], [32600.0, 1.0], [34800.0, 5.0], [34000.0, 2.0], [35600.0, 1.0], [36400.0, 3.0], [37200.0, 4.0], [38000.0, 2.0], [40400.0, 2.0], [42000.0, 5.0], [42800.0, 1.0], [43600.0, 1.0], [44400.0, 1.0], [46000.0, 1.0], [46800.0, 1.0], [48400.0, 1.0], [50800.0, 1.0], [52400.0, 1.0], [33500.0, 2.0], [35100.0, 5.0], [38300.0, 2.0], [37500.0, 2.0], [39900.0, 1.0], [42300.0, 3.0], [41500.0, 1.0], [43100.0, 2.0], [43900.0, 3.0], [47100.0, 1.0], [48700.0, 2.0], [50300.0, 1.0], [49500.0, 1.0], [17100.0, 5.0], [16700.0, 9.0], [17900.0, 11.0], [18300.0, 12.0], [17500.0, 3.0], [18700.0, 5.0], [19100.0, 12.0], [19500.0, 3.0], [19900.0, 5.0], [20300.0, 6.0], [21100.0, 5.0], [20700.0, 9.0], [21500.0, 3.0], [21900.0, 2.0], [23100.0, 10.0], [22700.0, 5.0], [24300.0, 1.0], [23900.0, 2.0], [24700.0, 3.0], [25100.0, 4.0], [25500.0, 2.0], [26300.0, 3.0], [27500.0, 2.0], [26700.0, 1.0], [27100.0, 4.0], [27900.0, 3.0], [28300.0, 2.0], [29100.0, 5.0], [28700.0, 3.0], [29500.0, 3.0], [30300.0, 2.0], [30700.0, 2.0], [31500.0, 1.0], [31900.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [34200.0, 2.0], [33400.0, 2.0], [35800.0, 3.0], [36600.0, 3.0], [37400.0, 1.0], [39800.0, 1.0], [40600.0, 3.0], [41400.0, 4.0], [42200.0, 2.0], [43000.0, 1.0], [43800.0, 4.0], [47000.0, 2.0], [45400.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 52800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 620.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 880.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 620.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 880.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.63725522E12, "maxY": 322.077348066298, "series": [{"data": [[1.63725522E12, 261.0567951318463], [1.63725528E12, 4.0]], "isOverall": false, "label": "Group - cadastro de usuarios", "isController": false}, {"data": [[1.63725522E12, 316.2406417112302], [1.63725528E12, 66.26190476190479]], "isOverall": false, "label": "Group - produtos", "isController": false}, {"data": [[1.63725522E12, 322.077348066298], [1.63725528E12, 71.42028985507253]], "isOverall": false, "label": "Group - usuarios", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2629.0, "minX": 1.0, "maxY": 52834.0, "series": [{"data": [[2.0, 50455.0], [3.0, 47039.0], [4.0, 45438.0], [6.0, 46683.5], [7.0, 46092.0], [8.0, 44531.0], [9.0, 42214.0], [10.0, 46442.0], [11.0, 44567.0], [12.0, 46560.0], [13.0, 44384.0], [14.0, 44959.0], [15.0, 44525.0], [16.0, 44474.0], [18.0, 44943.0], [19.0, 44516.0], [21.0, 45786.0], [22.0, 43834.0], [23.0, 43843.0], [24.0, 44847.0], [25.0, 44525.0], [27.0, 52834.0], [28.0, 52413.0], [29.0, 42506.0], [30.0, 43714.0], [31.0, 43746.0], [33.0, 48724.0], [32.0, 44266.0], [35.0, 44192.0], [34.0, 52119.0], [37.0, 44200.0], [36.0, 43483.0], [39.0, 44863.0], [38.0, 43229.0], [41.0, 43984.0], [40.0, 48874.0], [43.0, 43992.0], [42.0, 42367.0], [45.0, 43817.0], [47.0, 49516.0], [46.0, 38900.0], [49.0, 42735.0], [48.0, 43973.0], [51.0, 42426.0], [50.0, 52122.0], [53.0, 43751.0], [52.0, 43477.0], [55.0, 43218.0], [54.0, 43034.0], [56.0, 47179.0], [59.0, 43157.0], [58.0, 46417.0], [61.0, 42668.0], [60.0, 41529.0], [63.0, 42978.0], [62.0, 42963.0], [65.0, 41014.0], [64.0, 42891.5], [71.0, 48479.0], [70.0, 36850.0], [69.0, 42693.0], [68.0, 49266.0], [75.0, 50870.0], [74.0, 42729.0], [73.0, 40997.0], [72.0, 41152.0], [79.0, 46411.0], [78.0, 41434.0], [76.0, 39906.0], [83.0, 48063.0], [82.0, 45782.0], [81.0, 42323.0], [80.0, 42793.0], [87.0, 42060.0], [86.0, 42039.0], [85.0, 42041.0], [84.0, 41351.0], [91.0, 41988.0], [90.0, 42069.0], [89.0, 41457.0], [88.0, 42069.0], [95.0, 42539.0], [94.0, 42361.0], [93.0, 39764.0], [92.0, 41672.0], [99.0, 41997.0], [98.0, 42474.0], [96.0, 46645.0], [103.0, 39498.0], [102.0, 40414.0], [101.0, 41712.0], [100.0, 41118.0], [105.0, 41658.0], [104.0, 42483.0], [110.0, 41714.0], [108.0, 41664.0], [115.0, 40530.0], [114.0, 41976.0], [113.0, 32976.0], [112.0, 41751.0], [119.0, 42119.0], [118.0, 41314.0], [117.0, 44953.0], [116.0, 41938.0], [123.0, 36674.0], [122.0, 41709.0], [121.0, 41747.0], [120.0, 47023.0], [127.0, 41681.0], [126.0, 41040.0], [125.0, 41197.0], [124.0, 38646.0], [135.0, 41949.0], [134.0, 41823.0], [133.0, 41868.0], [132.0, 40922.0], [131.0, 38562.0], [130.0, 40220.0], [129.0, 45016.0], [128.0, 40678.0], [143.0, 43381.0], [142.0, 46476.0], [141.0, 44191.0], [140.0, 40346.0], [139.0, 40750.0], [138.0, 41114.0], [137.0, 36666.0], [136.0, 44841.0], [151.0, 40012.0], [150.0, 44268.0], [149.0, 40661.0], [148.0, 40465.0], [147.0, 40970.0], [146.0, 39397.0], [144.0, 42156.0], [158.0, 42660.5], [157.0, 41352.0], [155.0, 41810.0], [153.0, 39329.0], [152.0, 38039.0], [167.0, 38360.0], [166.0, 38120.0], [165.0, 38265.5], [164.0, 37336.0], [163.0, 28975.0], [162.0, 41397.0], [161.0, 36428.5], [160.0, 37615.0], [175.0, 37806.0], [174.0, 32533.0], [173.0, 36868.0], [172.0, 37543.0], [171.0, 37558.0], [170.0, 38129.0], [169.0, 37208.0], [168.0, 38118.0], [183.0, 34837.0], [182.0, 38346.0], [181.0, 37700.0], [180.0, 36029.0], [179.0, 38621.0], [178.0, 35544.0], [177.0, 45798.0], [176.0, 37032.0], [191.0, 36892.0], [190.0, 37429.0], [189.0, 37156.0], [188.0, 35483.0], [187.0, 36150.0], [185.0, 35379.0], [184.0, 36338.0], [199.0, 35776.0], [198.0, 35331.0], [197.0, 37379.0], [196.0, 36929.0], [195.0, 36976.0], [194.0, 42506.0], [193.0, 35332.0], [192.0, 35357.0], [206.0, 34048.0], [205.0, 34821.0], [204.0, 34576.0], [203.0, 35117.0], [202.0, 37265.0], [201.0, 33382.0], [200.0, 34656.0], [215.0, 35785.0], [214.0, 35155.0], [212.0, 44286.0], [211.0, 36440.0], [209.0, 36501.0], [208.0, 32974.0], [223.0, 34949.0], [222.0, 35274.0], [221.0, 36491.0], [220.0, 33592.0], [219.0, 35163.0], [218.0, 33401.0], [217.0, 36679.0], [216.0, 44067.0], [231.0, 35414.0], [230.0, 33647.0], [229.0, 37276.0], [228.0, 33802.0], [227.0, 41042.0], [226.0, 35568.0], [225.0, 33095.0], [224.0, 32807.0], [239.0, 40156.0], [238.0, 32571.0], [237.0, 35204.0], [236.0, 34156.0], [235.0, 34976.0], [234.0, 35214.0], [233.0, 35733.0], [232.0, 32157.0], [247.0, 34562.0], [246.0, 34212.0], [245.0, 30799.0], [244.0, 40159.0], [243.0, 35108.0], [242.0, 37316.0], [241.0, 34711.0], [240.0, 35692.0], [255.0, 31410.0], [254.0, 31420.0], [253.0, 31370.0], [252.0, 34834.0], [251.0, 34771.0], [249.0, 32954.0], [270.0, 33922.0], [271.0, 32078.0], [269.0, 33973.0], [268.0, 29152.0], [267.0, 36132.0], [266.0, 35864.0], [265.0, 34143.0], [264.0, 34150.0], [263.0, 28898.0], [257.0, 35384.0], [256.0, 35393.0], [259.0, 39757.0], [258.0, 37353.0], [262.0, 37767.0], [261.0, 29143.0], [260.0, 29511.0], [286.0, 31942.5], [287.0, 30727.0], [285.0, 38172.0], [284.0, 25457.0], [283.0, 32596.0], [282.0, 41471.0], [281.0, 35260.0], [280.0, 33986.0], [279.0, 41404.0], [273.0, 35868.0], [272.0, 33408.0], [275.0, 34573.0], [274.0, 30639.0], [278.0, 35346.0], [277.0, 39414.0], [276.0, 33385.0], [302.0, 29000.0], [303.0, 34280.0], [301.0, 34061.0], [300.0, 39886.0], [299.0, 30971.0], [298.0, 31941.5], [297.0, 29222.0], [296.0, 30569.0], [295.0, 28429.0], [288.0, 34805.0], [290.0, 34499.0], [289.0, 32414.0], [294.0, 30326.0], [293.0, 34801.5], [292.0, 28861.0], [318.0, 35387.0], [319.0, 29010.5], [317.0, 27718.0], [316.0, 30193.0], [315.0, 28803.0], [314.0, 29180.0], [313.0, 34866.0], [312.0, 30910.0], [311.0, 27000.0], [305.0, 26620.0], [304.0, 39771.0], [307.0, 36834.0], [306.0, 35890.0], [310.0, 24274.0], [309.0, 30176.0], [308.0, 29800.0], [334.0, 27786.0], [335.0, 32739.0], [333.0, 28250.0], [332.0, 28794.0], [331.0, 22948.0], [330.0, 31612.0], [329.0, 33508.0], [328.0, 23409.0], [327.0, 28014.0], [321.0, 33377.0], [323.0, 34619.0], [322.0, 27880.0], [326.0, 28420.0], [325.0, 23978.0], [324.0, 30834.0], [350.0, 26564.0], [351.0, 28531.0], [349.0, 26857.0], [348.0, 27132.0], [347.0, 26209.0], [346.0, 24792.0], [345.0, 26850.0], [344.0, 24933.0], [343.0, 25066.0], [337.0, 23667.0], [336.0, 23497.0], [339.0, 27828.0], [338.0, 28732.0], [342.0, 25577.0], [341.0, 26232.0], [340.0, 27198.0], [365.0, 23251.0], [366.0, 23044.0], [364.0, 28213.0], [355.0, 28677.0], [354.0, 29011.0], [353.0, 26620.0], [352.0, 26800.0], [363.0, 23138.0], [362.0, 30874.0], [361.0, 26606.0], [360.0, 25106.0], [359.0, 24401.0], [358.0, 26089.0], [357.0, 23829.0], [356.0, 32334.0], [382.0, 33828.0], [383.0, 22279.0], [381.0, 23008.0], [380.0, 25649.5], [379.0, 25885.0], [378.0, 24018.0], [377.0, 31961.0], [376.0, 23366.0], [375.0, 24535.0], [368.0, 28573.0], [370.0, 23931.0], [369.0, 31091.0], [374.0, 26575.0], [373.0, 27965.0], [372.0, 26585.0], [398.0, 26424.0], [399.0, 24272.0], [397.0, 30163.0], [396.0, 28200.0], [395.0, 28020.0], [394.0, 26222.0], [393.0, 20446.0], [392.0, 26368.0], [391.0, 29569.0], [385.0, 33881.0], [384.0, 19151.0], [387.0, 25306.0], [386.0, 25198.0], [390.0, 26922.0], [389.0, 28322.0], [388.0, 26194.0], [414.0, 28560.0], [415.0, 25245.0], [413.0, 25591.0], [412.0, 28104.0], [411.0, 16749.0], [410.0, 28063.0], [409.0, 25094.0], [408.0, 25632.0], [407.0, 21927.0], [401.0, 25844.0], [400.0, 23183.0], [403.0, 29733.0], [402.0, 28892.0], [406.0, 25444.0], [405.0, 25242.0], [404.0, 27858.0], [430.0, 23218.0], [431.0, 23164.0], [429.0, 23143.0], [428.0, 22436.0], [427.0, 31500.0], [426.0, 24969.0], [425.0, 31379.0], [424.0, 24983.0], [423.0, 24868.0], [417.0, 28443.0], [416.0, 27174.0], [419.0, 25369.0], [418.0, 25193.0], [422.0, 23215.0], [421.0, 24066.0], [420.0, 26963.0], [446.0, 23142.0], [447.0, 23063.5], [445.0, 22175.0], [444.0, 24760.0], [443.0, 26360.0], [442.0, 27922.0], [441.0, 26118.0], [440.0, 21808.0], [439.0, 23044.0], [433.0, 23297.0], [432.0, 22411.0], [435.0, 23200.0], [434.0, 27547.0], [438.0, 28183.0], [437.0, 25151.0], [463.0, 28327.0], [460.0, 27394.0], [451.0, 27037.0], [450.0, 23191.0], [449.0, 27148.0], [448.0, 23140.0], [459.0, 25699.0], [458.0, 29429.5], [457.0, 25625.0], [456.0, 27059.0], [455.0, 21567.0], [454.0, 21676.0], [453.0, 21668.0], [452.0, 27035.0], [478.0, 19826.0], [479.0, 19253.0], [477.0, 23617.0], [476.0, 21592.0], [475.0, 22779.0], [474.0, 17657.0], [473.0, 29652.0], [472.0, 30033.0], [471.0, 29837.0], [464.0, 19335.0], [466.0, 26543.0], [465.0, 15974.0], [469.0, 24132.0], [468.0, 22428.0], [494.0, 28721.0], [495.0, 29166.0], [493.0, 21392.0], [492.0, 23095.0], [491.0, 22731.0], [490.0, 24830.0], [489.0, 23130.0], [488.0, 23115.0], [487.0, 25647.0], [481.0, 23476.0], [480.0, 21847.0], [483.0, 22751.0], [482.0, 26335.0], [486.0, 29484.0], [485.0, 25607.0], [484.0, 27367.0], [499.0, 25647.0], [510.0, 22482.0], [511.0, 23069.0], [508.0, 22268.0], [498.0, 21198.0], [497.0, 28695.0], [496.0, 26739.0], [505.0, 28963.0], [504.0, 26137.0], [503.0, 22731.0], [502.0, 21364.0], [501.0, 29120.0], [500.0, 21370.0], [537.0, 27903.0], [541.0, 20809.0], [543.0, 21656.0], [529.0, 24000.0], [528.0, 24521.0], [531.0, 24022.0], [530.0, 22247.0], [533.0, 20075.0], [532.0, 20197.0], [540.0, 20692.0], [539.0, 22197.0], [538.0, 24157.0], [536.0, 20345.0], [519.0, 28943.0], [518.0, 25869.0], [517.0, 21067.0], [516.0, 28446.0], [515.0, 23086.0], [514.0, 21040.0], [513.0, 21819.0], [512.0, 26000.0], [527.0, 21800.0], [526.0, 24535.0], [525.0, 20828.0], [523.0, 27502.0], [522.0, 20861.0], [521.0, 18078.0], [520.0, 20371.0], [535.0, 20122.0], [534.0, 20226.0], [570.0, 18029.0], [574.0, 22995.0], [575.0, 18158.0], [560.0, 18330.0], [562.0, 18350.0], [561.0, 15085.0], [565.0, 23034.0], [564.0, 25675.0], [573.0, 25217.0], [572.0, 26067.0], [571.0, 17055.0], [569.0, 19359.0], [551.0, 19017.0], [550.0, 17001.0], [549.0, 15540.0], [548.0, 24199.0], [547.0, 24163.0], [546.0, 23794.0], [545.0, 21758.0], [544.0, 21882.0], [559.0, 20073.0], [558.0, 21549.0], [557.0, 19684.0], [556.0, 18987.0], [555.0, 22534.0], [554.0, 20690.0], [553.0, 18861.0], [552.0, 20175.0], [567.0, 21950.0], [566.0, 18167.0], [601.0, 24249.0], [606.0, 20615.5], [607.0, 20788.0], [593.0, 19910.0], [592.0, 21613.0], [595.0, 22269.0], [594.0, 21665.0], [597.0, 20208.0], [596.0, 24402.0], [604.0, 16706.0], [603.0, 20345.0], [602.0, 20401.0], [600.0, 20795.0], [583.0, 20254.0], [582.0, 22161.0], [581.0, 26016.0], [580.0, 21808.0], [579.0, 21737.0], [578.0, 21294.0], [577.0, 17702.0], [576.0, 18156.0], [591.0, 19669.0], [590.0, 21281.0], [589.0, 21492.0], [588.0, 19417.0], [587.0, 22738.0], [586.0, 17718.0], [585.0, 21279.0], [584.0, 21267.0], [599.0, 19307.0], [598.0, 18264.0], [636.0, 18045.0], [639.0, 20099.0], [624.0, 16414.0], [626.0, 23746.0], [625.0, 16147.0], [628.0, 24194.0], [627.0, 20651.0], [638.0, 20098.0], [637.0, 16109.0], [635.0, 18030.0], [634.0, 20096.0], [633.0, 18540.0], [632.0, 16469.0], [623.0, 20125.0], [609.0, 20911.0], [608.0, 19237.0], [611.0, 24418.0], [610.0, 16457.0], [613.0, 18443.0], [612.0, 11287.0], [615.0, 17985.0], [614.0, 23748.0], [622.0, 24336.0], [621.0, 20904.0], [619.0, 16905.0], [618.0, 16896.0], [617.0, 18683.0], [616.0, 23801.0], [631.0, 17091.0], [629.0, 16512.0], [668.0, 20505.0], [671.0, 15385.0], [656.0, 17625.0], [658.0, 21304.666666666668], [657.0, 20702.0], [660.0, 17473.0], [659.0, 18973.0], [670.0, 17227.0], [669.0, 18879.0], [667.0, 17012.0], [666.0, 23798.0], [665.0, 17205.0], [664.0, 23806.0], [654.0, 20703.0], [641.0, 16371.0], [640.0, 16124.0], [643.0, 18367.0], [642.0, 16412.0], [645.0, 16719.0], [644.0, 16789.0], [647.0, 17096.0], [646.0, 18963.0], [653.0, 19135.0], [652.0, 17289.0], [651.0, 22901.0], [650.0, 20696.0], [649.0, 20487.0], [648.0, 23855.0], [662.0, 20748.0], [661.0, 19129.0], [700.0, 19511.0], [703.0, 19106.0], [689.0, 17199.0], [688.0, 17941.0], [691.0, 20326.0], [690.0, 23229.0], [693.0, 23053.0], [692.0, 17001.0], [702.0, 19083.0], [701.0, 19491.0], [699.0, 17677.0], [698.0, 17464.0], [697.0, 14067.0], [696.0, 16114.0], [687.0, 15974.0], [673.0, 20457.0], [675.0, 23175.0], [674.0, 23476.0], [677.0, 19833.0], [676.0, 15765.0], [679.0, 15966.0], [678.0, 17916.0], [686.0, 19787.0], [685.0, 18157.0], [684.0, 15929.5], [683.0, 19911.0], [682.0, 19800.0], [681.0, 15915.0], [680.0, 15753.0], [695.0, 18899.0], [694.0, 19183.0], [729.0, 18783.0], [733.0, 15121.0], [734.0, 15533.0], [721.0, 17157.0], [720.0, 15303.0], [723.0, 18832.0], [722.0, 18942.0], [725.0, 15305.0], [724.0, 18802.0], [732.0, 15205.0], [731.0, 18628.5], [730.0, 21331.0], [728.0, 21091.0], [711.0, 17520.0], [710.0, 15764.0], [709.0, 13983.0], [708.0, 19588.0], [707.0, 16684.0], [706.0, 22965.0], [705.0, 19097.0], [704.0, 22526.0], [719.0, 16515.0], [717.0, 17088.0], [716.0, 17072.0], [715.0, 18830.0], [714.0, 16503.0], [713.0, 19046.0], [712.0, 14946.0], [727.0, 21810.0], [726.0, 18852.0], [764.0, 13077.0], [767.0, 12904.0], [753.0, 18223.0], [755.0, 16601.0], [754.0, 20938.0], [757.0, 13413.0], [756.0, 15419.0], [766.0, 18032.0], [765.0, 18102.0], [763.0, 13418.0], [762.0, 15284.0], [761.0, 20727.0], [760.0, 18137.0], [751.0, 15918.0], [737.0, 20859.0], [739.0, 18634.0], [738.0, 17581.0], [741.0, 17638.0], [740.0, 16635.0], [743.0, 21876.0], [742.0, 21860.0], [750.0, 21857.0], [749.0, 21424.0], [748.0, 17623.0], [747.0, 21471.0], [746.0, 21473.0], [745.0, 17543.0], [744.0, 21105.0], [759.0, 21410.0], [758.0, 18314.0], [796.0, 15136.0], [799.0, 18440.0], [785.0, 14754.0], [784.0, 20711.0], [787.0, 18138.5], [786.0, 17224.0], [789.0, 18606.0], [788.0, 13049.0], [798.0, 20564.0], [797.0, 17209.0], [795.0, 14742.0], [794.0, 13574.0], [793.0, 14353.0], [792.0, 15059.0], [783.0, 21087.0], [769.0, 13009.0], [768.0, 11277.0], [771.0, 14823.0], [770.0, 12978.0], [773.0, 21209.0], [772.0, 14764.0], [775.0, 18442.0], [774.0, 20387.0], [782.0, 18886.0], [781.0, 21248.0], [780.0, 17268.0], [779.0, 21181.0], [778.0, 14965.0], [777.0, 20803.0], [776.0, 18380.0], [791.0, 14852.0], [790.0, 17123.0], [826.0, 20516.0], [830.0, 14930.0], [831.0, 15026.0], [817.0, 16741.0], [816.0, 17211.0], [819.0, 16767.0], [818.0, 11080.0], [821.0, 20687.0], [820.0, 14711.5], [829.0, 12986.0], [828.0, 14794.0], [827.0, 16966.0], [825.0, 13096.0], [807.0, 16808.0], [806.0, 12928.0], [805.0, 18725.0], [804.0, 17145.0], [803.0, 15056.0], [802.0, 13099.0], [801.0, 15111.0], [800.0, 21121.0], [815.0, 20091.0], [814.0, 15354.0], [813.0, 17244.0], [812.0, 20641.0], [811.0, 13216.0], [810.0, 13208.0], [809.0, 9689.0], [808.0, 15147.0], [823.0, 17024.0], [822.0, 14856.0], [860.0, 19008.0], [863.0, 16880.0], [849.0, 16972.0], [851.0, 15134.0], [850.0, 15029.0], [853.0, 16581.0], [852.0, 18770.0], [862.0, 19985.0], [861.0, 14829.0], [859.0, 16716.0], [858.0, 15058.0], [857.0, 13014.0], [856.0, 12946.0], [847.0, 17114.0], [833.0, 20575.0], [832.0, 12969.0], [835.0, 20481.0], [834.0, 20551.0], [837.0, 20468.0], [836.0, 12928.0], [839.0, 13027.0], [838.0, 14975.0], [846.0, 12964.0], [845.0, 20447.0], [844.0, 20308.0], [842.0, 20447.0], [841.0, 20537.0], [840.0, 20529.0], [855.0, 12936.0], [854.0, 14889.0], [892.0, 14116.0], [895.0, 13770.0], [881.0, 16803.0], [880.0, 15179.0], [883.0, 15433.5], [882.0, 12440.0], [885.0, 19144.0], [884.0, 18925.0], [894.0, 19900.0], [893.0, 15018.0], [891.0, 19150.0], [890.0, 19102.0], [889.0, 19900.0], [888.0, 15291.0], [878.0, 13408.0], [865.0, 15432.0], [864.0, 16930.0], [867.0, 20056.0], [866.0, 19565.0], [869.0, 12814.0], [868.0, 15252.0], [871.0, 16763.5], [870.0, 15050.0], [877.0, 17078.0], [876.0, 17211.0], [875.0, 15288.0], [874.0, 20042.0], [872.0, 18830.0], [887.0, 15575.0], [886.0, 19109.0], [924.0, 16525.0], [927.0, 13796.0], [913.0, 16047.0], [912.0, 16002.0], [915.0, 14026.0], [914.0, 14005.0], [917.0, 15918.0], [916.0, 15906.0], [926.0, 15733.0], [925.0, 14692.0], [923.0, 13211.0], [922.0, 15684.0], [921.0, 14479.0], [920.0, 15003.0], [911.0, 16053.0], [896.0, 15472.0], [898.0, 13852.0], [899.0, 11862.0], [897.0, 13664.0], [901.0, 13881.0], [900.0, 13823.0], [903.0, 13666.0], [902.0, 15453.0], [910.0, 13923.0], [909.0, 15747.0], [908.0, 15737.0], [907.0, 15726.0], [906.0, 19063.0], [905.0, 15693.0], [904.0, 19117.0], [919.0, 13938.0], [918.0, 15882.0], [956.0, 14067.0], [959.0, 13156.0], [945.0, 12981.0], [944.0, 13959.0], [947.0, 18751.0], [946.0, 15520.0], [949.0, 16409.0], [948.0, 18068.0], [958.0, 16745.0], [957.0, 18436.0], [955.0, 15871.0], [954.0, 17891.0], [953.0, 11092.0], [952.0, 19312.0], [943.0, 14335.0], [929.0, 18465.0], [931.0, 13886.0], [930.0, 15717.0], [933.0, 13786.0], [932.0, 11941.0], [935.0, 15637.0], [934.0, 13852.0], [942.0, 14462.0], [941.0, 14327.0], [940.0, 12996.0], [939.0, 13027.0], [938.0, 15815.0], [937.0, 12036.0], [936.0, 15626.0], [951.0, 18594.0], [950.0, 18621.0], [984.0, 16159.0], [990.0, 14903.0], [991.0, 14906.0], [978.0, 15993.0], [977.0, 16706.0], [987.0, 14389.0], [986.0, 14392.0], [985.0, 13104.0], [975.0, 15237.0], [961.0, 18425.0], [960.0, 15948.0], [963.0, 15955.0], [962.0, 15974.0], [965.0, 19176.0], [964.0, 18382.0], [967.0, 15933.0], [966.0, 15968.0], [974.0, 15953.0], [972.0, 18442.0], [971.0, 16023.0], [970.0, 13027.0], [969.0, 19039.0], [968.0, 10469.0], [983.0, 16188.0], [982.0, 18160.0], [981.0, 12614.0], [979.0, 18377.0], [1018.0, 14665.0], [1022.0, 18464.0], [1023.0, 18574.0], [1009.0, 18457.0], [1008.0, 18571.0], [1011.0, 18396.0], [1010.0, 18169.0], [1013.0, 10523.0], [1012.0, 14698.0], [1021.0, 17951.0], [1020.0, 18059.0], [1019.0, 18548.0], [1016.0, 14706.0], [1017.0, 14731.0], [999.0, 17941.0], [998.0, 10910.0], [997.0, 12412.0], [996.0, 17926.0], [995.0, 10857.0], [994.0, 18827.0], [993.0, 18120.0], [1007.0, 17811.0], [1006.0, 16040.0], [1005.0, 17837.0], [1004.0, 15960.0], [1003.0, 18193.0], [1002.0, 17830.0], [1001.0, 18725.0], [1000.0, 14848.0], [1015.0, 12534.0], [1014.0, 12555.0], [1084.0, 14942.0], [1056.0, 17932.0], [1058.0, 10711.0], [1060.0, 14644.0], [1062.0, 17239.0], [1064.0, 10919.0], [1066.0, 17384.0], [1068.0, 14666.0], [1070.0, 13951.0], [1082.0, 12509.0], [1080.0, 12818.0], [1078.0, 11134.0], [1076.0, 14624.0], [1074.0, 14639.0], [1072.0, 10780.0], [1038.0, 14414.0], [1036.0, 18384.0], [1034.0, 12525.0], [1032.0, 14423.0], [1030.0, 17978.0], [1028.0, 18436.0], [1026.0, 12528.0], [1024.0, 18223.0], [1054.0, 18277.0], [1052.0, 17959.0], [1050.0, 18317.0], [1048.0, 17689.0], [1046.0, 17750.0], [1042.0, 18257.0], [1040.0, 18258.0], [1144.0, 15450.0], [1140.0, 9597.0], [1148.0, 7918.0], [1120.0, 11763.0], [1122.0, 15463.0], [1124.0, 16223.0], [1126.0, 12365.5], [1128.0, 11405.0], [1130.0, 7855.0], [1132.0, 9661.0], [1134.0, 9617.0], [1150.0, 15170.0], [1146.0, 13394.5], [1142.0, 11540.0], [1138.0, 16160.0], [1136.0, 15308.0], [1088.0, 14051.0], [1090.0, 14005.0], [1092.0, 10638.0], [1094.0, 14224.0], [1096.0, 11415.0], [1098.0, 14171.0], [1100.0, 14183.0], [1102.0, 17295.0], [1118.0, 12115.0], [1114.0, 16630.0], [1112.0, 14295.0], [1110.0, 14016.0], [1108.0, 14011.0], [1106.0, 14004.0], [1104.0, 13943.0], [1212.0, 11411.0], [1202.0, 14875.0], [1184.0, 15615.0], [1186.0, 15560.0], [1188.0, 15064.0], [1190.0, 11747.0], [1192.0, 7575.0], [1194.0, 9586.0], [1196.0, 15286.0], [1198.0, 15289.0], [1214.0, 15020.0], [1210.0, 11165.0], [1208.0, 15031.0], [1206.0, 12889.0], [1200.0, 15234.0], [1152.0, 15152.0], [1154.0, 9691.0], [1156.0, 11689.0], [1158.0, 15965.0], [1160.0, 15926.0], [1162.0, 15266.0], [1164.0, 15900.0], [1182.0, 13729.5], [1180.0, 13522.0], [1178.0, 13512.0], [1174.0, 15660.5], [1172.0, 15863.0], [1170.0, 11515.0], [1168.0, 9931.0], [1272.0, 13837.0], [1268.0, 6203.0], [1276.0, 13681.0], [1248.0, 14441.0], [1250.0, 9407.0], [1252.0, 13065.0], [1254.0, 10793.0], [1256.0, 11459.0], [1258.0, 11053.0], [1260.0, 13699.0], [1262.0, 10002.0], [1278.0, 12932.0], [1274.0, 12993.0], [1270.0, 9461.0], [1264.0, 9156.0], [1230.0, 14769.0], [1228.0, 14291.0], [1226.0, 11247.0], [1224.0, 12023.5], [1222.0, 11036.5], [1220.0, 9013.5], [1218.0, 11470.0], [1216.0, 14839.0], [1246.0, 11113.0], [1244.0, 13103.0], [1242.0, 11155.0], [1238.0, 11149.0], [1236.0, 9234.0], [1234.0, 14465.0], [1232.0, 14744.0], [1334.0, 13055.0], [1330.0, 12896.0], [1338.0, 12957.0], [1340.0, 7254.0], [1312.0, 12949.5], [1314.0, 12430.5], [1316.0, 12230.0], [1318.0, 12940.0], [1320.0, 13172.0], [1322.0, 13004.0], [1324.0, 10929.5], [1326.0, 12342.0], [1342.0, 9837.5], [1336.0, 12978.0], [1332.0, 12774.0], [1328.0, 13044.0], [1280.0, 12985.0], [1282.0, 7720.0], [1284.0, 11948.666666666666], [1286.0, 13509.0], [1288.0, 13128.0], [1290.0, 13467.0], [1292.0, 13406.0], [1294.0, 8664.0], [1310.0, 12935.0], [1308.0, 12296.0], [1306.0, 13179.0], [1304.0, 9569.0], [1302.0, 13091.5], [1300.0, 9720.0], [1298.0, 13366.0], [1296.0, 13360.0], [1348.0, 5373.5], [1346.0, 6333.5], [1350.0, 9426.0], [1352.0, 11487.0], [1354.0, 12565.0], [1356.0, 7581.0], [1358.0, 5985.0], [1360.0, 8533.0], [1362.0, 5404.5], [1364.0, 5160.0], [1344.0, 7895.0], [1374.0, 11451.0], [1372.0, 7586.0], [1370.0, 11169.0], [1368.0, 5980.0], [1366.0, 7726.0], [1382.0, 5030.5], [1380.0, 7867.0], [1378.0, 8492.0], [1384.0, 7873.0], [1386.0, 11202.0], [1406.0, 7814.0], [1404.0, 7907.0], [1402.0, 5962.0], [1400.0, 9010.0], [1396.0, 5565.5], [1394.0, 7640.0], [1392.0, 7482.0], [1398.0, 10665.0], [1388.0, 5070.333333333333], [1390.0, 7485.333333333333], [1414.0, 9288.0], [1470.0, 4123.333333333333], [1458.0, 4636.5], [1434.0, 6917.5], [1432.0, 4648.0], [1428.0, 4564.0], [1424.0, 8281.0], [1438.0, 8324.0], [1408.0, 8149.0], [1410.0, 10249.0], [1412.0, 6192.0], [1416.0, 4439.0], [1454.0, 5774.0], [1452.0, 6513.0], [1456.0, 6808.0], [1422.0, 8032.0], [1420.0, 6327.0], [1418.0, 6260.0], [1460.0, 4722.5], [1462.0, 5425.5], [1468.0, 6195.0], [1466.0, 6539.5], [1464.0, 6099.0], [1440.0, 7931.0], [1444.0, 7450.0], [1446.0, 6979.0], [1448.0, 7672.0], [1450.0, 3257.0], [1472.0, 6168.5], [1474.0, 6108.333333333333], [1079.0, 14577.0], [1075.0, 10403.0], [1083.0, 12522.0], [1087.0, 12266.0], [1057.0, 18191.0], [1059.0, 18264.0], [1061.0, 17053.0], [1063.0, 14803.0], [1065.0, 14665.0], [1069.0, 12713.0], [1071.0, 12671.0], [1085.0, 14833.0], [1081.0, 10727.0], [1077.0, 14724.0], [1073.0, 14540.0], [1039.0, 14362.0], [1037.0, 10630.0], [1035.0, 14466.0], [1033.0, 12526.0], [1031.0, 14391.0], [1029.0, 18476.0], [1027.0, 18455.0], [1025.0, 17943.0], [1053.0, 14580.0], [1051.0, 10548.0], [1049.0, 18009.0], [1047.0, 18259.0], [1045.0, 12585.0], [1043.0, 18266.0], [1041.0, 18355.0], [1149.0, 16004.0], [1151.0, 12115.0], [1121.0, 10658.0], [1123.0, 7958.0], [1125.0, 13233.0], [1127.0, 11434.0], [1129.0, 9746.0], [1131.0, 9697.0], [1133.0, 9626.0], [1135.0, 13214.0], [1147.0, 11777.0], [1145.0, 9792.0], [1143.0, 15458.0], [1141.0, 9823.0], [1139.0, 15269.0], [1137.0, 9807.0], [1119.0, 13421.0], [1089.0, 12153.0], [1091.0, 16171.0], [1093.0, 17221.0], [1095.0, 10616.0], [1097.0, 16898.0], [1099.0, 14198.5], [1101.0, 14024.0], [1103.0, 12238.0], [1117.0, 10041.0], [1115.0, 13558.0], [1113.0, 16810.0], [1111.0, 12511.0], [1109.0, 14013.0], [1107.0, 14015.0], [1105.0, 16066.0], [1209.0, 15012.0], [1211.0, 15089.0], [1215.0, 14524.0], [1185.0, 11697.0], [1187.0, 15538.0], [1189.0, 14857.0], [1191.0, 11138.0], [1193.0, 7675.0], [1195.0, 14713.0], [1197.0, 11391.0], [1199.0, 15107.0], [1207.0, 9293.0], [1205.0, 11248.0], [1203.0, 14976.0], [1201.0, 14610.0], [1183.0, 15606.0], [1153.0, 15358.0], [1155.0, 15637.0], [1157.0, 15799.0], [1159.0, 16007.0], [1161.0, 10355.0], [1163.0, 15906.0], [1167.0, 15125.0], [1165.0, 7828.0], [1181.0, 15058.0], [1179.0, 14938.0], [1177.0, 9727.0], [1175.0, 15371.0], [1173.0, 15463.0], [1171.0, 15162.0], [1169.0, 10118.0], [1277.0, 13838.0], [1279.0, 12966.0], [1249.0, 11113.0], [1251.0, 11080.0], [1253.0, 7533.0], [1255.0, 11050.0], [1257.0, 13324.0], [1259.0, 7789.0], [1261.0, 10239.0], [1263.0, 13463.0], [1275.0, 10884.0], [1273.0, 12843.0], [1271.0, 13902.0], [1269.0, 13060.0], [1267.0, 11221.0], [1265.0, 9437.0], [1231.0, 14644.0], [1229.0, 14727.0], [1227.0, 9499.0], [1225.0, 9184.0], [1223.0, 14852.0], [1221.0, 14484.0], [1219.0, 9257.0], [1247.0, 11158.0], [1245.0, 11050.0], [1243.0, 11165.0], [1241.0, 13214.0], [1239.0, 7679.0], [1237.0, 11081.0], [1235.0, 11253.0], [1233.0, 13515.0], [1339.0, 12547.0], [1337.0, 8441.0], [1343.0, 7893.5], [1313.0, 7604.0], [1315.0, 9715.0], [1317.0, 13130.0], [1319.0, 13187.0], [1321.0, 13091.0], [1323.0, 9426.0], [1325.0, 12571.0], [1327.0, 12550.0], [1341.0, 9297.0], [1335.0, 12728.0], [1333.0, 12546.0], [1331.0, 12715.0], [1329.0, 9387.0], [1311.0, 12640.0], [1281.0, 9664.5], [1283.0, 11177.0], [1285.0, 10433.0], [1287.0, 13523.0], [1289.0, 13581.0], [1291.0, 13053.0], [1293.0, 13338.0], [1295.0, 7652.0], [1309.0, 12412.0], [1307.0, 12650.0], [1305.0, 13019.5], [1303.0, 5661.0], [1301.0, 13364.0], [1299.0, 13383.0], [1297.0, 12915.0], [1349.0, 11506.0], [1357.0, 7573.0], [1399.0, 6269.0], [1347.0, 11678.0], [1351.0, 5907.0], [1353.0, 9300.0], [1355.0, 11821.0], [1359.0, 5953.0], [1361.0, 6212.5], [1363.0, 7572.0], [1375.0, 8881.0], [1345.0, 9673.5], [1373.0, 7687.0], [1371.0, 5997.0], [1369.0, 8089.0], [1367.0, 11895.0], [1365.0, 9316.0], [1381.0, 7863.0], [1379.0, 11247.0], [1377.0, 7832.0], [1383.0, 5724.0], [1385.0, 11549.0], [1407.0, 4310.0], [1403.0, 5912.0], [1401.0, 9871.0], [1393.0, 7750.0], [1397.0, 10922.0], [1387.0, 5050.0], [1389.0, 11391.0], [1391.0, 11144.0], [1423.0, 5647.0], [1417.0, 7637.0], [1433.0, 4355.0], [1429.0, 7488.5], [1427.0, 4500.0], [1425.0, 8573.0], [1409.0, 4315.0], [1411.0, 5131.5], [1413.0, 9304.0], [1415.0, 4294.0], [1437.0, 6315.0], [1451.0, 5803.5], [1453.0, 6635.0], [1457.0, 6343.5], [1421.0, 6084.5], [1419.0, 6122.0], [1459.0, 6893.0], [1461.0, 4831.0], [1467.0, 5943.0], [1465.0, 6219.0], [1463.0, 6704.0], [1471.0, 6143.0], [1441.0, 8318.0], [1443.0, 7607.0], [1445.0, 5209.0], [1447.0, 7680.0], [1449.0, 2629.0], [1473.0, 5471.0], [1475.0, 5534.0], [1.0, 47484.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[758.1453333333333, 21018.455999999973]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1475.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 915.2666666666667, "minX": 1.63725522E12, "maxY": 457846.76666666666, "series": [{"data": [[1.63725522E12, 313130.36666666664], [1.63725528E12, 457846.76666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.63725522E12, 5231.216666666666], [1.63725528E12, 915.2666666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16853.48576078111, "minX": 1.63725522E12, "maxY": 39906.8265682657, "series": [{"data": [[1.63725522E12, 16853.48576078111], [1.63725528E12, 39906.8265682657]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16588.57933279091, "minX": 1.63725522E12, "maxY": 36908.815498154945, "series": [{"data": [[1.63725522E12, 16588.57933279091], [1.63725528E12, 36908.815498154945]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 8363.257933279083, "minX": 1.63725522E12, "maxY": 28095.413284132836, "series": [{"data": [[1.63725522E12, 8363.257933279083], [1.63725528E12, 28095.413284132836]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2384.0, "minX": 1.63725522E12, "maxY": 52834.0, "series": [{"data": [[1.63725522E12, 41471.0], [1.63725528E12, 52834.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.63725522E12, 2384.0], [1.63725528E12, 28975.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.63725522E12, 26985.2], [1.63725528E12, 47251.40000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.63725522E12, 37597.61999999997], [1.63725528E12, 52631.920000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.63725522E12, 29124.699999999993], [1.63725528E12, 49259.2]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 3898.0, "minX": 1.0, "maxY": 47261.5, "series": [{"data": [[34.0, 18248.5], [35.0, 23200.0], [36.0, 13034.5], [42.0, 17543.0], [47.0, 34949.0], [3.0, 33508.0], [51.0, 9257.0], [57.0, 9461.0], [59.0, 17093.5], [61.0, 12818.0], [4.0, 27027.0], [64.0, 41732.0], [73.0, 9683.0], [78.0, 14930.0], [5.0, 39329.0], [84.0, 13852.0], [98.0, 13817.5], [6.0, 32445.0], [8.0, 43381.0], [12.0, 7528.5], [13.0, 30326.0], [14.0, 8597.0], [15.0, 35528.0], [1.0, 3898.0], [16.0, 6622.0], [17.0, 12894.5], [18.0, 27440.0], [20.0, 5496.0], [21.0, 37700.0], [23.0, 26209.0], [24.0, 44092.0], [25.0, 26569.0], [29.0, 24365.5], [31.0, 7711.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 21639.0], [35.0, 24955.5], [36.0, 16720.0], [42.0, 18802.0], [47.0, 35188.5], [3.0, 41352.0], [51.0, 14720.0], [57.0, 13062.5], [59.0, 20096.0], [61.0, 17536.5], [64.0, 41824.0], [4.0, 47261.5], [73.0, 13214.0], [78.0, 18032.0], [5.0, 40077.5], [84.0, 16581.0], [98.0, 15983.5], [6.0, 45311.5], [8.0, 40970.0], [13.0, 31814.0], [14.0, 44516.0], [15.0, 35117.0], [17.0, 23794.0], [18.0, 28501.5], [20.0, 11202.0], [21.0, 33074.0], [23.0, 26089.0], [24.0, 43612.5], [25.0, 26039.5], [29.0, 23115.0], [31.0, 11495.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 98.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 3871.0, "minX": 1.0, "maxY": 47261.5, "series": [{"data": [[34.0, 18161.5], [35.0, 23199.0], [36.0, 12313.0], [42.0, 17543.0], [47.0, 34833.0], [3.0, 22947.0], [51.0, 9257.0], [57.0, 9461.0], [59.0, 17091.5], [61.0, 12818.0], [4.0, 27026.0], [64.0, 41693.0], [73.0, 9682.0], [78.0, 14930.0], [5.0, 38037.0], [84.0, 13408.0], [98.0, 13127.0], [6.0, 18963.5], [8.0, 39397.0], [12.0, 7528.5], [13.0, 28859.0], [14.0, 8597.0], [15.0, 34660.5], [1.0, 3871.0], [16.0, 6622.0], [17.0, 12893.5], [18.0, 26711.5], [20.0, 5496.0], [21.0, 37206.0], [23.0, 24791.0], [24.0, 42549.5], [25.0, 24534.0], [29.0, 24362.5], [31.0, 7686.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[34.0, 21639.0], [35.0, 24955.5], [36.0, 16720.0], [42.0, 18802.0], [47.0, 35188.5], [3.0, 41352.0], [51.0, 14719.5], [57.0, 13061.5], [59.0, 20096.0], [61.0, 17536.5], [64.0, 41824.0], [4.0, 47261.5], [73.0, 13187.0], [78.0, 18032.0], [5.0, 40077.5], [84.0, 16581.0], [98.0, 15983.5], [6.0, 45311.5], [8.0, 40970.0], [13.0, 30970.5], [14.0, 44516.0], [15.0, 35116.0], [17.0, 23794.0], [18.0, 28501.5], [20.0, 11202.0], [21.0, 33074.0], [23.0, 26088.0], [24.0, 43612.5], [25.0, 26039.5], [29.0, 23115.0], [31.0, 11495.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 98.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.63725522E12, "maxY": 25.0, "series": [{"data": [[1.63725522E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725522E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.63725522E12, "maxY": 12.583333333333334, "series": [{"data": [[1.63725522E12, 6.433333333333334], [1.63725528E12, 2.45]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.63725522E12, 1.45]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.63725522E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}, {"data": [[1.63725522E12, 12.583333333333334], [1.63725528E12, 2.066666666666667]], "isOverall": false, "label": "500", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.63725528E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.066666666666667, "minX": 1.63725522E12, "maxY": 12.6, "series": [{"data": [[1.63725522E12, 7.883333333333334], [1.63725528E12, 2.45]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.63725522E12, 12.6], [1.63725528E12, 2.066666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.066666666666667, "minX": 1.63725522E12, "maxY": 12.6, "series": [{"data": [[1.63725522E12, 7.883333333333334], [1.63725528E12, 2.45]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.63725522E12, 12.6], [1.63725528E12, 2.066666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.63725528E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

